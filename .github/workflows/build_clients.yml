name: Build Clients

permissions:
  id-token: write
  contents: write

on:
  workflow_dispatch:
  repository_dispatch:
    types: [Integration-with-Automation]
run-name: ${{ github.actor }} triggered build clients ðŸš€

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-clients:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download OpenAPI file
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow: read_openapi_schema.yaml
          repo: CompassLabs/dojo_api
          name: openapi-spec
          branch: main
      - name: Modify OpenAPI description
        run: |
          DESCRIPTION=$(cat description.md)
          jq --arg description "$DESCRIPTION" '.info.description = $description' openapi.json > temp_openapi.json && mv temp_openapi.json openapi.json

      - name: Check for openapi-spec changes
        id: check_changes
        run: |
          git fetch origin main
          if [ ! -n "$(git diff --name-status origin/main)" ]; then
            echo "No changes to openapi-spec, exiting early"
            exit 0
          fi

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: Install dependencies
        run: |
          cd ./python_client 
          poetry install
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23.3.0
      - name: "Setup jq"
        uses: dcarbone/install-jq-action@v3
        with:
          version: 1.7
          force: false

      ##############################################################################################
      # PYTHON CLIENT
      - name: Generate python client
        run: |
          cd ./python_client
          # copy openapi json to local dir then clean up later
          cp ../openapi.json ./
          LATEST_VERSION=$(curl -L -s "https://pypi.org/pypi/compass.api_client/json" \
              | jq  -r '.releases | keys | .[]' \
              | sort -V \
              | tail -n1
          )

          poetry version patch
          NEXT_VERSION=$(poetry version --short)
          docker run \
            --rm \
            -v .:/local/ \
             openapitools/openapi-generator-cli generate \
            -i /local/openapi.json \
            -g python \
            -o /local/out/python \
            -p projectName=compass.api_client,packageName=compass.api_client,packageVersion=$NEXT_VERSION
          sudo chown -R $USER out/python/
          find out/python -type f | xargs -n1 chmod 666
          rsync -a out/python/* .
          sudo rm -rf out
          sed -i 's/name =.*/name = "compass.api_client"\npackages = [ { include = "compass"} ]/' pyproject.toml
          rm openapi.json
      - name: Build package
        if: env.changes == 'true'
        run: |
          cd ./python_client
          poetry build
          ls -la dist/
      - name: Publish to PyPi
        if: env.changes == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: false
          packages-dir: python_client/dist

      ##############################################################################################
      # TS CLIENT
      - name: Generate API SDK and Zod Types
        run: |
          cd ./ts_client
          node --version
          npm --version
          npm install &&
          npm run generate:typescript_client
      - name: Format generated code
        run: |
          cd ./ts_client
          npm install
          npm run format:fix
      - name: Increment package version
        run: |
          cd ./ts_client
          current_version=$(jq -r '.version' package.json)
          IFS='.' read -r -a version_parts <<< "$current_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          jq --arg new_version "$new_version" '.version = $new_version' package.json > tmp.$$.json && mv tmp.$$.json package.json

      - name: Publish to npm
        run: |
          cd ./ts_client
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm run build
          npm publish --access public

      ##############################################################################################      - name: Commit clients
      - name: Commit Changes
        # always run, this way versions will always increment even if there is a failure
        if: always()
        run: |
          git config --global user.name 'Github Automation'
          git config --global user.email 'ollivanders@users.noreply.github.com'
          git add python_client ts_client openapi.json
          git status
          # [git diff-index] is used to only push if there are changes without failing the job
          git diff-index --cached --quiet HEAD || git commit -am "update: clients"
          git push
