{
  "openapi": "3.1.0",
  "info": {
    "title": "Compass API",
    "description": "#### Welcome to the DeFi API from [Compass Labs](https://www.compasslabs.ai)!\n\nOur API allows you to interact and transact in DeFi with ease.\n\nWe help you construct your transactions via a **simple REST API**.  \nYou maintain custody at all times and **sign** all transactions **yourself**.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.compasslabs.ai",
      "description": "Production server"
    }
  ],
  "paths": {
    "/v0/aave/supply": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Supply/Lend",
        "description": "By supplying assets, users can earn interest on their deposits.\n\nThe supplied collateral can be used as a basis for borrowing other assets, allowing\nusers to leverage their positions. In combination with a trading protocol, this can\ncreate leverage.\n\nOverall, this endpoint is a critical component for users looking to maximize their\nasset utility within the AAVEv3 ecosystem, providing both earning potential and\nborrowing flexibility.",
        "operationId": "aave_supply",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveSupplyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/borrow": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Borrow",
        "description": "You will pay interest for your borrows.\n\nPrice changes in the assets may lead to some or all of your collateral being\nliquidated, if the borrow position becomes unhealthy.",
        "operationId": "aave_borrow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveBorrowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/repay": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Repay loans",
        "description": "This endpoint allows users to repay a portion or the entirety of their borrowed\ntokens on the Aave platform.\n\nBy repaying borrowed amounts, users can improve their health factor, which is a\nmeasure of the safety of their loan position. A higher health factor reduces the\nrisk of liquidation, ensuring a more secure borrowing experience. The endpoint\nrequires specifying the chain and the details of the repayment transaction,\nincluding the amount and the asset to be repaid.",
        "operationId": "aave_repay",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveRepayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/withdraw": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Unstake",
        "description": "This endpoint facilitates the withdrawal of collateral from the Aave protocol.\n\nUsers can withdraw a portion or all of their collateral, which may increase the risk\nof liquidation if there are outstanding borrows. The withdrawal process also\nincludes the collection of any interest earned on the collateral. It is important\nfor users to carefully consider their outstanding debts and the potential impact on\ntheir liquidation threshold before proceeding with a withdrawal. This endpoint is\ndesigned to provide a seamless and efficient way to manage your collateral within\nthe Aave ecosystem.",
        "operationId": "aave_withdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveWithdrawRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/asset_price/get": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Token prices",
        "description": "This endpoint retrieves the current price of a specified asset in USD as\ndetermined by the Aave protocol.\n\nIt utilizes the Aave V3 Oracle to fetch the asset price, ensuring accurate and up-\nto-date information. The request requires the asset identifier and the blockchain\nnetwork (chain) on which the asset resides. The response provides the asset price in\na standardized format, converted from Wei to the base currency decimals defined by\nAave.",
        "operationId": "aave_asset_price",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetAssetPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveAssetPriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/liquidity/change/get": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Liquidity index",
        "description": "This endpoint retrieves the change in the reserve liquidity index between two\nprovided blocks.\n\nThis is then converted to a percentage change. The liquidity index represents the\nchange in debt and interest accrual over each block. Aave does not store individual\nuser balances directly. Instead, it keeps a scaled balance and uses the liquidity\nindex to compute real balances dynamically. If a user was to have deposited tokens\nat the start block, a positive liquidity index change will represent accrued\ninterest and a profit. If tokens were borrowed at the start block, this debt will\nincrease, compound on itself and represent large debt. The reverse in both cases is\ntrue if the liquidity index is negative.",
        "operationId": "aave_liquidity_change",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetLiquidityChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveLiquidityChangeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/user_position_summary/get": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Positions - total",
        "description": "This endpoint retrieves a comprehensive summary of a user's position on the AAVE\nplatform.\n\nIt provides key financial metrics including the total collateral deposited, total\ndebt accrued, available borrowing capacity, liquidation threshold, maximum loan-to-\nvalue ratio, and the health factor of the user's account. These metrics are\ncalculated by aggregating data across all open positions held by the user, offering\na holistic view of their financial standing within the AAVE ecosystem.",
        "operationId": "aave_user_position_summary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetUserPositionSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveUserPositionSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/user_position_per_token/get": {
      "post": {
        "tags": [
          "Aave V3"
        ],
        "summary": "Positions - per token",
        "description": "This endpoint retrieves the user's position for a specific token on the AAVE\nplatform.\n\nIt provides key financial metrics including the current aToken balance, current\nstable debt, current variable debt, principal stable debt, principal variable debt,\nstable borrow rate, stable borrow rate for new loans, variable borrow rate, and\nliquidity rate. These metrics are calculated by aggregating data across all open\npositions held by the user for the specified token, offering a detailed view of\ntheir financial standing within the AAVE ecosystem.",
        "operationId": "aave_user_position_per_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetUserPositionPerTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveUserPositionPerTokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/add_liquidity": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Provide liquidity",
        "description": "This endpoint allows users to provide liquidity to a specified pool on the\nAerodrome platform.\n\nUsers must specify the tokens, desired amounts, minimum amounts, and a deadline for\nthe transaction. The operation will ensure the pool exists and will use the sender's\naddress if no recipient is specified.",
        "operationId": "aerodrome_basic_liquidity_provision_add_liquidity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeAddLiquidityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/add_liquidity_eth": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Provide liquidity using WETH",
        "description": "This endpoint allows users to provide liquidity to a specified pool on the\nAerodrome platform using Wrapped Ether (WETH) and another token.\n\nUsers must specify the token pair, desired amounts, minimum amounts, and a deadline\nfor the transaction. The operation will ensure the pool exists and will use the\nsender's address if no recipient is specified. The transaction will be executed\nthrough the Aerodrome Basic Router contract, and the specified amount of WETH will\nbe sent along with the transaction.",
        "operationId": "aerodrome_basic_liquidity_provision_add_liquidity_eth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeAddLiquidityEthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/remove_liquidity": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Remove liquidity",
        "description": "This endpoint allows users to remove liquidity from a specified pool on the\nAerodrome platform.\n\nUsers must specify the token pair, the amount of liquidity to remove, minimum\namounts for each token, and a deadline for the transaction. The operation will\nensure the pool exists and will use the sender's address if no recipient is\nspecified. The transaction will be executed through the Aerodrome Basic Router\ncontract, and the specified amount of liquidity will be withdrawn from the pool.",
        "operationId": "aerodrome_basic_liquidity_provision_remove_liquidity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeRemoveLiquidityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/remove_liquidity_eth": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Remove liquidity using WETH",
        "description": "This endpoint allows users to remove liquidity from a pool on the Aerodrome\nplatform using WETH and another token.\n\nUsers must specify the token pair, the amount of liquidity to remove, minimum\namounts for each token, and a deadline for the transaction. The operation will\nensure the pool exists and will use the sender's address if no recipient is\nspecified. The transaction will be executed through the Aerodrome Basic Router\ncontract, and the specified amount of liquidity will be withdrawn from the pool.",
        "operationId": "aerodrome_basic_liquidity_provision_remove_liquidity_eth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeRemoveLiquidityEthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/swap/tokens": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Swap",
        "description": "Swap one token for another on Aerodrome.\n\nEnsure you specify the minimum amount you expect to receive to avoid trading at an\nunfavorable exchange rate. This endpoint facilitates the exchange of tokens by\ninteracting with the Aerodrome smart contract, ensuring that the transaction is\nexecuted only if the specified minimum output is met.",
        "operationId": "aerodrome_basic_swap_tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSwapTokensRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/swap/eth_for_token": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Swap from ETH",
        "description": "This endpoint allows you to swap a specified amount of ETH for a desired token on\nthe Aerodrome platform.\n\nTo protect against unfavorable exchange rates, you must specify the minimum amount\nof the token you wish to receive. The transaction will only be executed if this\nminimum amount is met, ensuring you do not accidentally trade at a disadvantageous\nrate.",
        "operationId": "aerodrome_basic_swap_eth_for_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSwapEthForTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/swap/token_for_eth": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Swap token for ETH",
        "description": "Swap a specified amount of a token for ETH using the Aerodrome platform.\n\nTo protect against unfavorable exchange rates, you must specify the minimum amount\nof ETH you wish to receive. The transaction will only be executed if this minimum\namount is met, ensuring you do not trade at a disadvantageous rate.",
        "operationId": "aerodrome_basic_swap_token_for_eth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSwapTokenForEthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/swap/sell_exactly": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Swap - from specified amount",
        "description": "This endpoint allows users to trade a specific amount of one token into another\ntoken using the Aerodrome Slipstream protocol.\n\nThe transaction is executed by specifying the exact amount of the input token to be\nsold, and the system calculates the amount of the output token that will be\nreceived. The operation ensures that the trade is conducted within the constraints\nof the current market conditions, taking into account the liquidity and price\nimpact. This endpoint is suitable for users who want to sell a precise quantity of a\ntoken and are willing to accept the resulting amount of the other token.",
        "operationId": "aerodrome_slipstream_swap_sell_exactly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamSellExactlyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/swap/buy_exactly": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Swap - into specified amount",
        "description": "This endpoint facilitates the trading of tokens by allowing users to specify the\nexact amount of the output token they wish to receive.\n\nUtilizing the Aerodrome Slipstream protocol, the system calculates the necessary\namount of the input token required to achieve the desired output. This operation is\nparticularly useful for users who have a specific target amount of the output token\nin mind and are willing to provide the corresponding input token amount. The\ntransaction is executed with consideration of current market conditions, including\nliquidity and price impact, ensuring that the trade is completed efficiently and\neffectively.",
        "operationId": "aerodrome_slipstream_swap_buy_exactly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamBuyExactlyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/mint": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Open a new LP position",
        "description": "Initiate a new Liquidity Provider (LP) position by minting tokens.\n\nThis endpoint allows users to open a new LP position, enabling them to participate\nin liquidity provision. The minting process involves creating a new position with\nspecified parameters, such as token amounts and pool details. The response will\nconfirm the successful creation of the LP position, providing users with the\nnecessary information to manage their newly minted position. This functionality is\ncrucial for users looking to expand their liquidity provision activities, offering\nthem the opportunity to engage in decentralized finance (DeFi) markets effectively.",
        "operationId": "aerodrome_slipstream_liquidity_provision_mint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamMintLiquidityProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/increase": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Increase an LP position",
        "description": "Increase the liquidity of an existing Liquidity Provider (LP) position.\n\nThis endpoint allows users to add more tokens to their current LP position,\nenhancing their participation in liquidity provision. By increasing liquidity, users\ncan potentially earn more rewards and improve their position in the pool. The\nprocess involves specifying additional token amounts and updating the pool details.\nThe response will confirm the successful increase of the LP position, providing\nusers with updated information about their enhanced position. This functionality is\nvital for users aiming to optimize their liquidity provision strategy, enabling them\nto adapt to market conditions and maximize their returns in decentralized finance\n(DeFi) markets.",
        "operationId": "aerodrome_slipstream_liquidity_provision_increase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamIncreaseLiquidityProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/withdraw": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Withdraw an LP position",
        "description": "Withdraw an existing Liquidity Provider (LP) position.\n\nThis endpoint allows users to remove their tokens from an LP position, effectively\nclosing their participation in the liquidity pool. The withdrawal process involves\nspecifying the LP position to be closed, and the response will confirm the\nsuccessful removal of liquidity, providing users with details about the withdrawn\ntokens and any remaining balances. This functionality is essential for users who\nwish to exit their liquidity provision activities, enabling them to reclaim their\nassets and potentially reallocate them to other investment opportunities. The\nendpoint ensures a smooth and secure withdrawal process, facilitating users'\nstrategic management of their decentralized finance (DeFi) portfolios.",
        "operationId": "aerodrome_slipstream_liquidity_provision_withdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamWithdrawLiquidityProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/positions/get": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "List LP positions",
        "description": "Retrieve the total number of Liquidity Provider (LP) positions associated with a\nspecific sender.\n\nThis endpoint allows users to query and obtain detailed information about their LP\npositions, including the number of active positions they hold. The response model,\nAerodromeLPPositionsInfo, provides a structured representation of the LP positions\ndata, ensuring clarity and ease of use. This functionality is essential for users\nmanaging their liquidity provision activities, enabling them to make informed\ndecisions based on their current positions.",
        "operationId": "aerodrome_slipstream_liquidity_provision_positions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamGetLiquidityProvisionPositionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AerodromeLPPositionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/pool_price/get": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Pool price",
        "description": "This endpoint retrieves the current price of a pool, indicating how many token0\nyou can purchase for 1 token1.\n\nNote that this is an instantaneous price and may change during any trade. For a more\naccurate representation of the trade ratios between the two assets, consider using\nthe quote endpoint.",
        "operationId": "aerodrome_slipstream_pool_price",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamGetPoolPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AerodromeSlipstreamPoolPriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/portfolio/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "List user portfolio",
        "description": "Fetch the detailed portfolio of a specific wallet address on a given blockchain.\n\nThis includes the total value of the portfolio in USD and a breakdown of token\nbalances, including their respective values and quantities.",
        "operationId": "generic_portfolio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/visualize_portfolio/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Visualize user portfolio",
        "description": "Generate a visual representation of the token portfolio for a wallet address.\n\nThe response is an SVG image of a pie chart depicting the relative distribution of\ntokens held, colored and labeled with token symbols, percentages and token values in\nUSD.",
        "operationId": "generic_visualize_portfolio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisualizePortfolioRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/price/usd/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Token price",
        "description": "Retrieves the price of the specified token relative to USD using Chainlink's on-\nchain price feeds.\n\nChainlink is a decentralized oracle that aggregates price data from off-chain\nsources. This ensures the price is tamper-resistant but the price might be stale\nwith the update frequency of the oracle.",
        "operationId": "generic_price_usd",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/supported_tokens/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "List supported tokens",
        "description": "Get the list of supported tokens on a chain by the Compass API.",
        "operationId": "generic_supported_tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/balance/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "User token balance",
        "description": "Returns the balance of a specific ERC20 token for a given user address.",
        "operationId": "generic_balance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetErc20BalanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/allowance/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Get allowance - Protocol",
        "description": "In decentralized finance (DeFi) protocols such as Uniswap or AAVE, users must set\na token allowance to authorize the protocol to spend a specified amount of their\ntokens on their behalf.\n\nThis is a crucial step before engaging in any transactions or operations within\nthese protocols, ensuring that the protocol has the necessary permissions to manage\nthe user's tokens securely and efficiently.",
        "operationId": "generic_allowance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetErc20AllowanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowanceInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/ens/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Resolve ENS",
        "description": "An ENS name is a string ending in `.eth`.\n\nE.g. `vitalik.eth`. This endpoint can be used to\nquery the actual ethereum wallet address behind the ENS name.",
        "operationId": "generic_ens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEnsDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnsNameInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/wrap_eth": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Wrap ETH",
        "description": "Wrapping ETH creates an ERC-20 compliant form of ETH that is typically needed for\nit to be traded on DeFi protocols.",
        "operationId": "generic_wrap_eth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrapEthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/unwrap_weth": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Unwrap WETH",
        "description": "Unwrapping WETH converts the ERC-20 compliant form of ETH back to native ETH that\ncan be used for gas and other native purposes.",
        "operationId": "generic_unwrap_weth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnwrapWethRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/transfer/erc20": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Transfer Token",
        "description": "Sends ERC20 tokens from the sender's address to the specified recipient.",
        "operationId": "generic_transfer_erc20",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferERC20Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/transfer/native_token": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Transfer ETH",
        "description": "Sends native ETH from the sender's address to the specified recipient.",
        "operationId": "generic_transfer_native_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferEthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/allowance/set": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Set Allowance - Protocol",
        "description": "This endpoint allows users to modify the token allowance for a specific protocol.\n\nIn decentralized finance (DeFi), setting an allowance is a necessary step to\nauthorize a protocol to spend a specified amount of tokens on behalf of the user.\nThis operation is crucial for ensuring that the protocol can manage the user's\ntokens securely and efficiently, enabling seamless transactions and operations\nwithin the DeFi ecosystem.",
        "operationId": "generic_allowance_set",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncreaseAllowanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/allowance/set_any": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Set Allowance - Token",
        "description": "This endpoint allows users to set an allowance for any arbitrary ERC20 token\naddress.\n\nIn decentralized finance (DeFi), setting an allowance is a critical operation that\npermits a protocol to spend a specified amount of tokens on behalf of the user. This\nfunctionality is essential for enabling secure and efficient token management,\nfacilitating smooth transactions and operations within the DeFi ecosystem. By using\nthis endpoint, users can specify the token address and the amount they wish to\nauthorize, ensuring precise control over their token allowances.",
        "operationId": "generic_allowance_set_any",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncreaseAllowanceAnyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/multicall/authorization": {
      "post": {
        "tags": [
          "Transaction Batching"
        ],
        "summary": "Get EIP-7702 Authorization",
        "description": "Get authorization data for EIP-7702 batching operations.\n\nThis authorization is required to prevent replay attacks and ensure transaction\nordering when batching multiple actions into a single transaction. The authorization\nincludes a nonce and chain ID to guarantee transaction uniqueness and proper network\ntargeting.",
        "operationId": "multicall_authorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MulticallAuthorizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MulticallAuthorizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/multicall/execute": {
      "post": {
        "tags": [
          "Transaction Batching"
        ],
        "summary": "Execute Tx Batching",
        "description": "Execute a batch of transactions in a single multicall using EIP-7702.\n\nThis endpoint allows bundling multiple contract calls into a single atomic\ntransaction, reducing gas costs and ensuring all operations succeed or fail\ntogether. The transaction must be authorized using the /authorization endpoint to\nprevent replay attacks.",
        "operationId": "multicall_execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MulticallExecuteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedMulticallTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/swap/buy_exactly": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Buy exact amount",
        "description": "This endpoint allows users to trade a variable amount of one token to receive an\nexact amount of another token using the Uniswap protocol.\n\nThe transaction is executed on the specified blockchain network, and the user must\nprovide the necessary transaction details, including the token to buy, the token to\npay with, and the exact amount to receive. If the token being paid with is WETH and\nneeds to be wrapped, the appropriate amount will be wrapped automatically.",
        "operationId": "uniswap_swap_buy_exactly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapBuyExactlyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/swap/sell_exactly": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Sell exact amount",
        "description": "This endpoint allows users to trade a specific amount of one token into another\ntoken using the Uniswap protocol.\n\nThe transaction is executed on the specified blockchain network, and the user must\nprovide the necessary transaction details, including the token to sell, the token to\nreceive, and the amount to sell. If the token being sold is WETH and needs to be\nwrapped, the appropriate amount will be wrapped automatically.",
        "operationId": "uniswap_swap_sell_exactly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapSellExactlyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/increase": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Increase an LP position",
        "description": "This endpoint allows users to increase their existing Liquidity Provider (LP)\npositions on the Uniswap platform.\n\nBy providing the necessary parameters, users can add more liquidity to their current\npositions, thereby increasing their stake in the liquidity pool. This operation is\nbeneficial for users who wish to enhance their potential earnings from trading fees\nwithin the pool. The endpoint requires details such as the token pair, additional\namount to be added, and any other parameters necessary for the liquidity increase\nprocess.",
        "operationId": "uniswap_liquidity_provision_increase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapIncreaseLiquidityProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/mint": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Open a new LP position",
        "description": "This endpoint allows users to open a new Liquidity Provider (LP) position on the\nUniswap platform.\n\nBy providing the necessary parameters, users can initiate a minting process to\ncreate a new LP token, which represents their stake in a specific liquidity pool.\nThis operation is essential for users looking to participate in liquidity provision,\nenabling them to earn fees from trades that occur within the pool. The endpoint\nrequires details such as the token pair, amount, and any additional parameters\nneeded for the minting process.",
        "operationId": "uniswap_liquidity_provision_mint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapMintLiquidityProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/withdraw": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Withdraw an LP position",
        "description": "This endpoint allows users to withdraw their Liquidity Provider (LP) positions\nfrom the Uniswap platform.\n\nBy specifying the necessary parameters, users can initiate the withdrawal process to\nremove their stake from a specific liquidity pool. This operation is crucial for\nusers who wish to reclaim their assets or reallocate their liquidity to different\npools or investments. The endpoint requires details such as the token pair, the\namount to be withdrawn, and any additional parameters needed for the withdrawal\nprocess. Users should ensure they meet any protocol requirements or conditions\nbefore initiating a withdrawal to avoid potential issues or penalties.",
        "operationId": "uniswap_liquidity_provision_withdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapWithdrawLiquidityProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/quote/buy_exactly/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Get quote - to specified amount",
        "description": "This endpoint calculates the amount of input tokens required to purchase a\nspecified amount of output tokens from a Uniswap pool.\n\nIt also provides the resulting price after the transaction. The calculation takes\ninto account the current pool state and the specified fee tier.",
        "operationId": "uniswap_quote_buy_exactly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetBuyQuoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapBuyQuoteInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/quote/sell_exactly/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Get quote - from specified amount",
        "description": "This endpoint calculates the amount of input tokens required to purchase a\nspecified amount of output tokens from a Uniswap pool.\n\nIt also provides the resulting price after the transaction. The calculation takes\ninto account the current pool state and the specified fee tier.",
        "operationId": "uniswap_quote_sell_exactly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetSellQuoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapSellQuoteInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/pool_price/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Pool price",
        "description": "This endpoint calculates the price of a token in a Uniswap pool.\n\nThe price is calculated based on the current pool state and the specified fee tier.",
        "operationId": "uniswap_pool_price",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetPoolPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapPoolPriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/in_range/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Check if LP is active.",
        "description": "This endpoint allows users to check whether a specific liquidity provider ()\nposition is within the active tick range on the uniswap platform.\n\nby providing the token id associated with the position, users can verify if the\nposition is currently within the tick range where trading occurs. this information\nis essential for users to monitor the status of their lp positions and ensure that\nthey are actively participating in the trading activities within the liquidity pool\nand earning trading fees.",
        "operationId": "uniswap_liquidity_provision_in_range",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapCheckInRangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapCheckInRangeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/positions/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "List LP",
        "description": "This endpoint retrieves the number of Liquidity Provider (LP) positions\nassociated with a specific sender address on the Uniswap platform.\n\nUsers can query this endpoint to obtain detailed information about their LP\npositions, including the total number of positions and relevant metadata. This\ninformation is crucial for users to manage and analyze their liquidity provision\nactivities effectively.",
        "operationId": "uniswap_liquidity_provision_positions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetLiquidityProvisionPositionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapLPPositionsInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AaveAssetPriceResponse": {
        "properties": {
          "price": {
            "type": "string",
            "title": "Price",
            "description": "The price of the asset in USD."
          }
        },
        "type": "object",
        "required": [
          "price"
        ],
        "title": "AaveAssetPriceResponse"
      },
      "AaveBorrowParams": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to borrow.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to borrow",
            "examples": [
              150.5
            ]
          },
          "interest_rate_mode": {
            "$ref": "#/components/schemas/InterestRateMode",
            "description": "The interest rate mode to borrow",
            "examples": [
              1
            ],
            "ge": 1,
            "le": 2
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "interest_rate_mode"
        ],
        "title": "AaveBorrowParams"
      },
      "AaveBorrowRequest": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to borrow.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to borrow",
            "examples": [
              150.5
            ]
          },
          "interest_rate_mode": {
            "$ref": "#/components/schemas/InterestRateMode",
            "description": "The interest rate mode to borrow",
            "examples": [
              1
            ],
            "ge": 1,
            "le": 2
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "interest_rate_mode",
          "chain",
          "sender"
        ],
        "title": "AaveBorrowRequest",
        "example": {
          "amount": 1,
          "asset": "USDT",
          "chain": "arbitrum:mainnet",
          "interest_rate_mode": 2,
          "on_behalf_of": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "AaveGetAssetPriceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the asset whose price you want.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "asset"
        ],
        "title": "AaveGetAssetPriceRequest",
        "example": {
          "asset": "USDC",
          "chain": "arbitrum:mainnet"
        }
      },
      "AaveGetLiquidityChangeRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "start_block": {
            "type": "integer",
            "title": "Start Block",
            "description": "The starting block.",
            "examples": [
              21500000
            ]
          },
          "end_block": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Block",
            "description": "The ending block. If nothing provided defaults to latest",
            "examples": [
              21800000
            ]
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the asset to fetch liquidity index change for.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "start_block",
          "asset"
        ],
        "title": "AaveGetLiquidityChangeRequest",
        "example": {
          "asset": "USDC",
          "chain": "arbitrum:mainnet",
          "end_block": 319407231,
          "start_block": 0
        }
      },
      "AaveGetUserPositionPerTokenRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to fetch the token-specific position of.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the asset to fetch the user's position on.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user",
          "asset"
        ],
        "title": "AaveGetUserPositionPerTokenRequest",
        "example": {
          "asset": "USDC",
          "chain": "arbitrum:mainnet",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "AaveGetUserPositionSummaryRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to get the position summary of. Values are in USD.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "AaveGetUserPositionSummaryRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "AaveLiquidityChangeResponse": {
        "properties": {
          "liquidity_change": {
            "type": "string",
            "title": "Liquidity Change",
            "description": "The change in the liqudiity index between the two times, expressed as a percentage."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "Dateime of starting block"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time",
            "description": "Dateime of ending block"
          }
        },
        "type": "object",
        "required": [
          "liquidity_change",
          "start_time",
          "end_time"
        ],
        "title": "AaveLiquidityChangeResponse"
      },
      "AaveRepayParams": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to repay.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to repay",
            "examples": [
              1.5
            ]
          },
          "interest_rate_mode": {
            "$ref": "#/components/schemas/InterestRateMode",
            "description": "The interest rate mode to borrow",
            "examples": [
              1
            ],
            "ge": 1,
            "le": 2
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "interest_rate_mode"
        ],
        "title": "AaveRepayParams"
      },
      "AaveRepayRequest": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to repay.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to repay",
            "examples": [
              1.5
            ]
          },
          "interest_rate_mode": {
            "$ref": "#/components/schemas/InterestRateMode",
            "description": "The interest rate mode to borrow",
            "examples": [
              1
            ],
            "ge": 1,
            "le": 2
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "interest_rate_mode",
          "chain",
          "sender"
        ],
        "title": "AaveRepayRequest",
        "example": {
          "amount": 1,
          "asset": "USDT",
          "chain": "arbitrum:mainnet",
          "interest_rate_mode": 2,
          "on_behalf_of": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "AaveSupplyParams": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to supply as collateral. You can borrow against it.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to supply",
            "examples": [
              1.5
            ]
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made. Defaults to the transaction sender.",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount"
        ],
        "title": "AaveSupplyParams"
      },
      "AaveSupplyRequest": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to supply as collateral. You can borrow against it.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to supply",
            "examples": [
              1.5
            ]
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made. Defaults to the transaction sender.",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "chain",
          "sender"
        ],
        "title": "AaveSupplyRequest",
        "example": {
          "amount": 1,
          "asset": "USDC",
          "chain": "arbitrum:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "AaveUserPositionPerTokenResponse": {
        "properties": {
          "token_balance": {
            "type": "string",
            "title": "Token Balance",
            "description": "The balance of AAVE aTokens (interest-bearing representations of your deposits)."
          },
          "stable_debt": {
            "type": "string",
            "title": "Stable Debt",
            "description": "The amount of the user's debt with a fixed interest rate."
          },
          "variable_debt": {
            "type": "string",
            "title": "Variable Debt",
            "description": "The amount of the user's debt with a variable interest rate."
          },
          "principal_stable_debt": {
            "type": "string",
            "title": "Principal Stable Debt",
            "description": "The amount of the user's debt that was part of the initial principal of all\n        loans with a stable interest rate."
          },
          "principal_variable_debt": {
            "type": "string",
            "title": "Principal Variable Debt",
            "description": "The amount of the user's debt that was part of the initial principal of all\n        loans with a variable interest rate. This is the value stored by AAVE, which may be slightly\n        inaccurate, but reflects what AAVE believes you initially paid."
          },
          "stable_borrow_rate": {
            "type": "string",
            "title": "Stable Borrow Rate",
            "description": "The current average annualised interest rate for all your stable loans in\n        this pool."
          },
          "stable_borrow_rate_for_new_loans": {
            "type": "string",
            "title": "Stable Borrow Rate For New Loans",
            "description": "The annualised interest rate you would pay on a new stable loan."
          },
          "variable_borrow_rate": {
            "type": "string",
            "title": "Variable Borrow Rate",
            "description": "The current annualised interest rate for variable rate loans in this pool.\n        (This applies to both current and new loans.)"
          },
          "liquidity_rate": {
            "type": "string",
            "title": "Liquidity Rate",
            "description": "The annualised interest rate for deposited supplies."
          }
        },
        "type": "object",
        "required": [
          "token_balance",
          "stable_debt",
          "variable_debt",
          "principal_stable_debt",
          "principal_variable_debt",
          "stable_borrow_rate",
          "stable_borrow_rate_for_new_loans",
          "variable_borrow_rate",
          "liquidity_rate"
        ],
        "title": "AaveUserPositionPerTokenResponse"
      },
      "AaveUserPositionSummaryResponse": {
        "properties": {
          "maximum_loan_to_value_ratio": {
            "type": "string",
            "title": "Maximum Loan To Value Ratio",
            "description": "The loan to value ratio of a user."
          },
          "health_factor": {
            "type": "string",
            "title": "Health Factor",
            "description": "The health factor of a user. If this is above 1 it is safe; below 1 and the\n        user is in risk of liquidation. This number might be very high (which would mean the user is\n        safe!)"
          },
          "total_collateral": {
            "type": "string",
            "title": "Total Collateral",
            "description": "The total collateral (in USD) of a user."
          },
          "total_debt": {
            "type": "string",
            "title": "Total Debt",
            "description": "The total debt (in USD) of a user."
          },
          "available_borrows": {
            "type": "string",
            "title": "Available Borrows",
            "description": "The available borrows (in USD) of a user."
          },
          "liquidation_threshold": {
            "type": "string",
            "title": "Liquidation Threshold",
            "description": "The liquidation threshold of a user. A user might exceed this due to changing\n        asset values."
          }
        },
        "type": "object",
        "required": [
          "maximum_loan_to_value_ratio",
          "health_factor",
          "total_collateral",
          "total_debt",
          "available_borrows",
          "liquidation_threshold"
        ],
        "title": "AaveUserPositionSummaryResponse"
      },
      "AaveWithdrawParams": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to withdraw.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to withdraw",
            "examples": [
              1.5
            ]
          },
          "recipient": {
            "type": "string",
            "title": "Recipient",
            "description": "The address of the recipient of the withdrawn funds.",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "recipient"
        ],
        "title": "AaveWithdrawParams"
      },
      "AaveWithdrawRequest": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to withdraw.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to withdraw",
            "examples": [
              1.5
            ]
          },
          "recipient": {
            "type": "string",
            "title": "Recipient",
            "description": "The address of the recipient of the withdrawn funds.",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "asset",
          "amount",
          "recipient",
          "chain",
          "sender"
        ],
        "title": "AaveWithdrawRequest",
        "example": {
          "amount": 1,
          "asset": "USDC",
          "chain": "arbitrum:mainnet",
          "recipient": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "AerodromeAddLiquidityEthRequest": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to provide liquidity for alongside WETH.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to provide liquidity on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to provide liquidity on a volatile pool with a bonding curve of K=xy"
          },
          "amount_token_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Token Desired",
            "description": "The amount of token you want to provide",
            "examples": [
              1000
            ]
          },
          "amount_eth_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Eth Desired",
            "description": "The amount of WETH you want to provide",
            "examples": [
              1.5
            ]
          },
          "amount_token_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Token Min",
            "description": "The minimal amount of token you are willing to provide",
            "examples": [
              900
            ]
          },
          "amount_eth_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Eth Min",
            "description": "The minimal amount of WETH you are willing to provide",
            "examples": [
              1.5
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the LP tokens from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token",
          "stable",
          "amount_token_desired",
          "amount_eth_desired",
          "amount_token_min",
          "amount_eth_min",
          "deadline",
          "chain",
          "sender"
        ],
        "title": "AerodromeAddLiquidityEthRequest",
        "example": {
          "amount_eth_desired": 0.00048,
          "amount_eth_min": 0,
          "amount_token_desired": 1,
          "amount_token_min": 0,
          "chain": "base:mainnet",
          "deadline": 0,
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token": "USDC"
        }
      },
      "AerodromeAddLiquidityRequest": {
        "properties": {
          "token_a": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to provide liquidity for<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_b": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to provide liquidity for<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDT"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to provide liquidity on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to provide liquidity on a volatile pool with a bonding curve of K=xy"
          },
          "amount_a_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount A Desired",
            "description": "The amount of token A you want to provide",
            "examples": [
              1000
            ]
          },
          "amount_b_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount B Desired",
            "description": "The amount of token B you want to provide",
            "examples": [
              1000
            ]
          },
          "amount_a_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount A Min",
            "description": "The minimal amount of token A you are willing to provide",
            "examples": [
              900
            ]
          },
          "amount_b_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount B Min",
            "description": "The minimal amount of token B you are willing to provide",
            "examples": [
              900
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the LP tokens from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_a",
          "token_b",
          "stable",
          "amount_a_desired",
          "amount_b_desired",
          "amount_a_min",
          "amount_b_min",
          "deadline",
          "chain",
          "sender"
        ],
        "title": "AerodromeAddLiquidityRequest",
        "example": {
          "amount_a_desired": 1,
          "amount_a_min": 0,
          "amount_b_desired": 1,
          "amount_b_min": 0,
          "chain": "base:mainnet",
          "deadline": 0,
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_a": "USDC",
          "token_b": "USDT"
        }
      },
      "AerodromeLPPositionsResponse": {
        "properties": {
          "positions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AerodromePosition"
            },
            "type": "object",
            "title": "Positions",
            "description": "Liquidity provision positions belonging to a particular user. The key is a\ntuple of the token0, token1, tick_spacing, tick_lower, and tick_upper of the position."
          }
        },
        "type": "object",
        "required": [
          "positions"
        ],
        "title": "AerodromeLPPositionsResponse"
      },
      "AerodromePosition": {
        "properties": {
          "nonce": {
            "type": "integer",
            "title": "Nonce"
          },
          "operator": {
            "type": "string",
            "title": "Operator"
          },
          "token0": {
            "$ref": "#/components/schemas/Token"
          },
          "token1": {
            "$ref": "#/components/schemas/Token"
          },
          "tick_spacing": {
            "type": "integer",
            "title": "Tick Spacing"
          },
          "tick_lower": {
            "type": "integer",
            "title": "Tick Lower"
          },
          "tick_upper": {
            "type": "integer",
            "title": "Tick Upper"
          },
          "liquidity": {
            "type": "integer",
            "title": "Liquidity"
          },
          "fee_growth_inside0_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside0 Last X128"
          },
          "fee_growth_inside1_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside1 Last X128"
          },
          "tokens_owed0": {
            "type": "integer",
            "title": "Tokens Owed0"
          },
          "tokens_owed1": {
            "type": "integer",
            "title": "Tokens Owed1"
          },
          "token_id": {
            "type": "integer",
            "title": "Token Id"
          }
        },
        "type": "object",
        "required": [
          "nonce",
          "operator",
          "token0",
          "token1",
          "tick_spacing",
          "tick_lower",
          "tick_upper",
          "liquidity",
          "fee_growth_inside0_last_x128",
          "fee_growth_inside1_last_x128",
          "tokens_owed0",
          "tokens_owed1",
          "token_id"
        ],
        "title": "AerodromePosition"
      },
      "AerodromeRemoveLiquidityEthRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to remove liquidity for alongside WETH.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to remove liquidity from a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to remove liquidity from a volatile pool with a bonding curve of K=xy"
          },
          "liquidity": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Liquidity",
            "description": "The amount of liquidity you want to remove",
            "examples": [
              1000
            ]
          },
          "amount_token_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Token Min",
            "description": "The minimal amount of token you are willing to receive",
            "examples": [
              900
            ]
          },
          "amount_eth_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Eth Min",
            "description": "The minimal amount of WETH you are willing to receive",
            "examples": [
              900
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the tokens from this liquidity removal, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token",
          "stable",
          "liquidity",
          "amount_token_min",
          "amount_eth_min",
          "deadline"
        ],
        "title": "AerodromeRemoveLiquidityEthRequest",
        "example": {
          "amount_eth_min": 0,
          "amount_token_min": 0,
          "chain": "base:mainnet",
          "deadline": 0,
          "liquidity": 0.1,
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token": "USDC"
        }
      },
      "AerodromeRemoveLiquidityRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token_a": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to remove liquidity for<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_b": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to remove liquidity for<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDT"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to remove liquidity from a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to remove liquidity from a volatile pool with a bonding curve of K=xy"
          },
          "liquidity": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Liquidity",
            "description": "The amount of liquidity you want to remove",
            "examples": [
              1000
            ]
          },
          "amount_a_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount A Min",
            "description": "The minimal amount of token A you are willing to receive",
            "examples": [
              900
            ]
          },
          "amount_b_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount B Min",
            "description": "The minimal amount of token B you are willing to receive",
            "examples": [
              900
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the tokens from this liquidity removal, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token_a",
          "token_b",
          "stable",
          "liquidity",
          "amount_a_min",
          "amount_b_min",
          "deadline"
        ],
        "title": "AerodromeRemoveLiquidityRequest",
        "example": {
          "amount_a_min": 0,
          "amount_b_min": 0,
          "chain": "base:mainnet",
          "deadline": 0,
          "liquidity": 0.1,
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_a": "USDC",
          "token_b": "USDT"
        }
      },
      "AerodromeSlipstreamBuyExactlyRequest": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              1.5
            ]
          },
          "amount_in_maximum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In Maximum",
            "description": "The maximum amount of the token to swap from",
            "examples": [
              1.6
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "tick_spacing",
          "amount_out",
          "amount_in_maximum",
          "chain",
          "sender"
        ],
        "title": "AerodromeSlipstreamBuyExactlyRequest",
        "description": "Request model for buying exactly an amount of tokens.",
        "example": {
          "amount_in_maximum": 0.1,
          "amount_out": 0.000048,
          "chain": "base:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "tick_spacing": 100,
          "token_in": "USDC",
          "token_out": "WETH"
        }
      },
      "AerodromeSlipstreamGetLiquidityProvisionPositionsRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user to check the balance of",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "AerodromeSlipstreamGetLiquidityProvisionPositionsRequest"
      },
      "AerodromeSlipstreamGetPoolPriceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "tick_spacing"
        ],
        "title": "AerodromeSlipstreamGetPoolPriceRequest",
        "example": {
          "chain": "base:mainnet",
          "tick_spacing": 100,
          "token_in": "USDC",
          "token_out": "WETH"
        }
      },
      "AerodromeSlipstreamIncreaseLiquidityProvisionRequest": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min",
          "chain",
          "sender"
        ],
        "title": "AerodromeSlipstreamIncreaseLiquidityProvisionRequest",
        "example": {
          "amount0_desired": 0.1,
          "amount0_min": 0,
          "amount1_desired": 0.1,
          "amount1_min": 0,
          "chain": "base:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_id": 10433247
        }
      },
      "AerodromeSlipstreamMintLiquidityProvisionRequest": {
        "properties": {
          "token0": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the first token in the pair<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token1": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the second token in the pair<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          },
          "tick_lower": {
            "type": "integer",
            "title": "Tick Lower",
            "description": "The lower tick of the range to mint the position in",
            "examples": [
              -1000
            ]
          },
          "tick_upper": {
            "type": "integer",
            "title": "Tick Upper",
            "description": "The upper tick of the range to mint the position in",
            "examples": [
              1000
            ]
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "recipient": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipient",
            "description": "The address that will receive the LP tokens",
            "examples": [
              "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token0",
          "token1",
          "tick_spacing",
          "tick_lower",
          "tick_upper",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min",
          "chain",
          "sender"
        ],
        "title": "AerodromeSlipstreamMintLiquidityProvisionRequest",
        "description": "Request model for minting a new liquidity position.",
        "example": {
          "amount0_desired": 0.1,
          "amount0_min": 0,
          "amount1_desired": 0.000048,
          "amount1_min": 0,
          "chain": "base:mainnet",
          "recipient": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "tick_lower": -300000,
          "tick_spacing": 100,
          "tick_upper": 300000,
          "token0": "WETH",
          "token1": "USDT"
        }
      },
      "AerodromeSlipstreamPoolPriceResponse": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The first token "
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The second token in the pool"
          },
          "price": {
            "type": "string",
            "title": "Price",
            "description": "The price of the pool. This is expressed as an instantaneous amount of how\nmany token0 you need to buy 1 token1. In any swap this will not change during the trade; use\nthe quote endpoint to get a better idea of how much you will pay!"
          },
          "tick": {
            "type": "integer",
            "title": "Tick",
            "description": "The current tick in the pool. This is a number that represents the price of\nthe pool according to the aerodrome_slipstream v3 concentrated liquidity concept."
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "price",
          "tick"
        ],
        "title": "AerodromeSlipstreamPoolPriceResponse"
      },
      "AerodromeSlipstreamSellExactlyRequest": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          },
          "amount_out_minimum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Minimum",
            "description": "The minimum amount of the token to swap to, defaults to 0",
            "default": "0",
            "examples": [
              1.4
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "tick_spacing",
          "amount_in",
          "chain",
          "sender"
        ],
        "title": "AerodromeSlipstreamSellExactlyRequest",
        "description": "Request model for selling exactly an amount of tokens.",
        "example": {
          "amount_in": 1,
          "amount_out_minimum": 0,
          "chain": "base:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "tick_spacing": 100,
          "token_in": "USDC",
          "token_out": "WETH"
        }
      },
      "AerodromeSlipstreamWithdrawLiquidityProvisionRequest": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "percentage_for_withdrawal": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Percentage For Withdrawal",
            "description": "How much liquidity to take out in percentage.",
            "examples": [
              "25",
              "50",
              "75",
              "100"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "percentage_for_withdrawal",
          "chain",
          "sender"
        ],
        "title": "AerodromeSlipstreamWithdrawLiquidityProvisionRequest",
        "example": {
          "chain": "base:mainnet",
          "percentage_for_withdrawal": 1,
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_id": 10433247
        }
      },
      "AerodromeSwapEthForTokenRequest": {
        "properties": {
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of ETH you will give to aerodrome_basic for this trade",
            "examples": [
              1.5
            ]
          },
          "amount_out_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Min",
            "description": "The minimal amount of token you are willing to receive (will revert if the swap gives you less)",
            "examples": [
              2500
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to trade on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to trade on a volatile pool with a bonding curve of K=xy"
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the funds from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_out",
          "amount_in",
          "amount_out_min",
          "stable",
          "chain",
          "sender"
        ],
        "title": "AerodromeSwapEthForTokenRequest",
        "description": "Request model for swapping ETH for tokens.",
        "example": {
          "amount_in": 0.00047753,
          "amount_out_min": 0,
          "chain": "base:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_out": "USDC"
        }
      },
      "AerodromeSwapTokenForEthRequest": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of tokens you will give to aerodrome_basic for this trade",
            "examples": [
              6000
            ]
          },
          "amount_out_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Min",
            "description": "The minimal amount of ETH you are willing to receive (will revert if the swap gives you less)",
            "examples": [
              1.5
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to trade on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to trade on a volatile pool with a bonding curve of K=xy"
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the funds from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "amount_in",
          "amount_out_min",
          "stable",
          "chain",
          "sender"
        ],
        "title": "AerodromeSwapTokenForEthRequest",
        "description": "Request model for swapping tokens for ETH.",
        "example": {
          "amount_in": 1,
          "amount_out_min": 0,
          "chain": "base:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_in": "USDC"
        }
      },
      "AerodromeSwapTokensRequest": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of tokens you will give to aerodrome_basic for this trade",
            "examples": [
              6000
            ]
          },
          "amount_out_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Min",
            "description": "The minimal amount of token you are willing to receive (will revert if the\n        swap gives you less)",
            "examples": [
              1.5
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to trade on a stable pool with a bonding curve of K=x^3y+y^3x.\n        If false, try to trade on a volatile pool with a bonding curve of K=xy"
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the funds from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "amount_in",
          "amount_out_min",
          "stable",
          "chain",
          "sender"
        ],
        "title": "AerodromeSwapTokensRequest",
        "description": "Request model for swapping tokens.",
        "example": {
          "amount_in": 1,
          "amount_out_min": 0,
          "chain": "base:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "stable": true,
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_in": "USDC",
          "token_out": "USDT"
        }
      },
      "AllowanceInfoResponse": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of tokens allowed to be spent by spender",
            "examples": [
              1.5
            ]
          },
          "decimals": {
            "type": "integer",
            "title": "Decimals",
            "description": "Number of decimals of the token",
            "examples": [
              18
            ]
          },
          "token_symbol": {
            "$ref": "#/components/schemas/Token",
            "description": "Symbol of the token<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "Address of the token",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          },
          "contract_address": {
            "type": "string",
            "title": "Contract Address",
            "description": "Address of the contract",
            "examples": [
              "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "decimals",
          "token_symbol",
          "token_address",
          "contract_address"
        ],
        "title": "AllowanceInfoResponse",
        "description": "Response model for token allowance information."
      },
      "BalanceInfoResponse": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of tokens a particular address holds",
            "examples": [
              1.5
            ]
          },
          "decimals": {
            "type": "integer",
            "title": "Decimals",
            "description": "Number of decimals of the token",
            "examples": [
              18
            ]
          },
          "token_symbol": {
            "$ref": "#/components/schemas/Token",
            "description": "Symbol of the token<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "Address of the token",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "decimals",
          "token_symbol",
          "token_address"
        ],
        "title": "BalanceInfoResponse",
        "description": "Response model for token balance information."
      },
      "Chain": {
        "type": "string",
        "enum": [
          "base:mainnet",
          "ethereum:mainnet",
          "arbitrum:mainnet"
        ],
        "title": "Chain",
        "description": "The chain to use."
      },
      "ContractName": {
        "type": "string",
        "enum": [
          "AaveV3Pool",
          "AaveV3Oracle",
          "AaveV3ProtocolDataProvider",
          "AerodromeBasicFactory",
          "AerodromeSlipstreamFactory",
          "AerodromeBasicRouter",
          "AerodromeSlipstreamRouter",
          "AerodromeBasicPool",
          "AerodromeSlipstreamNonfungiblePositionManager",
          "UniswapV3Router",
          "UniswapV3Factory",
          "UniswapV3NFTPositionManager",
          "UniswapV3Quoter",
          "ChainlinkEACAggregatorProxy",
          "Multicall"
        ],
        "title": "ContractName",
        "description": "Select the protocol.\n\nE.g. for increasing ERC-20 allowance."
      },
      "EnsNameInfoResponse": {
        "properties": {
          "wallet_address": {
            "type": "string",
            "title": "Wallet Address",
            "description": "The wallet address of the user",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "registrant": {
            "type": "string",
            "title": "Registrant",
            "description": "The registrant of the ENS",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "wallet_address",
          "registrant"
        ],
        "title": "EnsNameInfoResponse",
        "description": "Response model for ENS name details."
      },
      "FeeEnum": {
        "type": "string",
        "enum": [
          "0.01",
          "0.05",
          "0.3",
          "1.0"
        ],
        "title": "FeeEnum",
        "description": "The transaction fee of a Uniswap pool in bips.\n\nUniswap supports 4 different fee levels."
      },
      "GetEnsDetailsRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "ens_name": {
            "type": "string",
            "title": "Ens Name",
            "description": "The ENS address of the user.",
            "examples": [
              "vitalik.eth"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "ens_name"
        ],
        "title": "GetEnsDetailsRequest",
        "description": "Request model for getting ENS details.",
        "example": {
          "chain": "ethereum:mainnet",
          "ens_name": "vitalik.eth"
        }
      },
      "GetErc20AllowanceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to get the ERC20 allowance of.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the allowance is checked.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to check allowance for.",
            "examples": [
              "AaveV3Pool"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user",
          "token",
          "contract_name"
        ],
        "title": "GetErc20AllowanceRequest",
        "description": "Request model for getting an ERC20 token allowance.",
        "example": {
          "chain": "arbitrum:mainnet",
          "contract_name": "AaveV3Pool",
          "token": "USDC",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "GetErc20BalanceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to get the ERC20 balance of.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the balance is checked.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user",
          "token"
        ],
        "title": "GetErc20BalanceRequest",
        "description": "Request model for getting an ERC20 token balance.",
        "example": {
          "chain": "arbitrum:mainnet",
          "token": "USDC",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Image": {
        "properties": {
          "image": {
            "type": "string",
            "title": "Image",
            "description": "Base64 encoded SVG image",
            "examples": [
              "data:image/svg+xml;base64, ..."
            ]
          }
        },
        "type": "object",
        "required": [
          "image"
        ],
        "title": "Image"
      },
      "IncreaseAllowanceAnyRequest": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The name of the token for which the allowance is increased.",
            "examples": [
              "Custom Token"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to increase allowance for.",
            "examples": [
              "AerodromeBasicRouter"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of tokens to increase the allowance by.",
            "examples": [
              1.5
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token",
          "contract_name",
          "amount",
          "chain",
          "sender"
        ],
        "title": "IncreaseAllowanceAnyRequest",
        "description": "Request model for increasing allowance for any arbitrary ERC20 token address."
      },
      "IncreaseAllowanceParams": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the allowance is increased.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to increase allowance for.",
            "examples": [
              "AaveV3Pool"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of tokens to increase the allowance by.",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "token",
          "contract_name",
          "amount"
        ],
        "title": "IncreaseAllowanceParams",
        "description": "Parameters model for increasing token allowance for a contract."
      },
      "IncreaseAllowanceRequest": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the allowance is increased.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to increase allowance for.",
            "examples": [
              "AaveV3Pool"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of tokens to increase the allowance by.",
            "examples": [
              1.5
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token",
          "contract_name",
          "amount",
          "chain",
          "sender"
        ],
        "title": "IncreaseAllowanceRequest",
        "description": "Request model for increasing token allowance for a contract.",
        "example": {
          "amount": 1,
          "chain": "arbitrum:mainnet",
          "contract_name": "AaveV3Pool",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token": "USDC"
        }
      },
      "InterestRateMode": {
        "type": "integer",
        "enum": [
          1,
          2
        ],
        "title": "InterestRateMode",
        "description": "On AAVE there are 2 different interest modes.\n\nA stable (but typically higher rate), or a variable rate."
      },
      "MulticallAction": {
        "properties": {
          "action_type": {
            "$ref": "#/components/schemas/MulticallActionType"
          },
          "body": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UniswapBuyExactlyParams"
              },
              {
                "$ref": "#/components/schemas/UniswapSellExactlyParams"
              },
              {
                "$ref": "#/components/schemas/UniswapMintLiquidityProvisionParams"
              },
              {
                "$ref": "#/components/schemas/UniswapWithdrawLiquidityProvisionParams"
              },
              {
                "$ref": "#/components/schemas/UniswapIncreaseLiquidityProvisionParams"
              },
              {
                "$ref": "#/components/schemas/AaveBorrowParams"
              },
              {
                "$ref": "#/components/schemas/AaveRepayParams"
              },
              {
                "$ref": "#/components/schemas/AaveSupplyParams"
              },
              {
                "$ref": "#/components/schemas/AaveWithdrawParams"
              },
              {
                "$ref": "#/components/schemas/IncreaseAllowanceParams"
              }
            ],
            "title": "Body"
          }
        },
        "type": "object",
        "required": [
          "action_type",
          "body"
        ],
        "title": "MulticallAction"
      },
      "MulticallActionType": {
        "type": "string",
        "enum": [
          "UNISWAP_BUY_EXACTLY",
          "UNISWAP_SELL_EXACTLY",
          "UNISWAP_MINT_LIQUIDITY",
          "UNISWAP_WITHDRAW_LIQUIDITY",
          "UNISWAP_ADD_LIQUIDITY",
          "AAVE_BORROW",
          "AAVE_REPAY",
          "AAVE_SUPPLY",
          "AAVE_WITHDRAW",
          "ALLOWANCE_INCREASE",
          "TRANSFER_ERC20"
        ],
        "title": "MulticallActionType"
      },
      "MulticallAuthorizationRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain",
            "description": "The blockchain network to use",
            "examples": [
              "ethereum:mainnet"
            ]
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The Ethereum address to use for authorization",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "address": {
            "type": "string",
            "title": "Address",
            "description": "The Ethereum address to authorize for multicall",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "address"
        ],
        "title": "MulticallAuthorizationRequest",
        "description": "Request model for getting a multicall authorization.\n\nThis model is used to authorize a sender address to perform multicall operations,\nallowing it to call multiple functions on multiple contracts in a single\ntransaction."
      },
      "MulticallAuthorizationResponse": {
        "properties": {
          "nonce": {
            "type": "integer",
            "title": "Nonce",
            "description": "A unique nonce value for this authorization",
            "examples": [
              12345
            ]
          },
          "address": {
            "type": "string",
            "title": "Address",
            "description": "The Ethereum address authorized for multicall",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "chainId": {
            "type": "integer",
            "title": "Chainid",
            "description": "The chain ID for the blockchain network",
            "examples": [
              1
            ]
          }
        },
        "type": "object",
        "required": [
          "nonce",
          "address",
          "chainId"
        ],
        "title": "MulticallAuthorizationResponse",
        "description": "Response model for multicall authorization."
      },
      "MulticallExecuteRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "signed_authorization": {
            "$ref": "#/components/schemas/SignedAuthorization"
          },
          "contract_address": {
            "type": "string",
            "title": "Contract Address",
            "description": "The address of the multicall contract"
          },
          "actions": {
            "items": {
              "$ref": "#/components/schemas/MulticallAction"
            },
            "type": "array",
            "title": "Actions",
            "description": "List of possible actions for multicall"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "signed_authorization",
          "contract_address",
          "actions"
        ],
        "title": "MulticallExecuteRequest",
        "description": "Request model for executing a multicall."
      },
      "Portfolio": {
        "properties": {
          "total_value_in_usd": {
            "type": "string",
            "title": "Total Value In Usd",
            "description": "Total value of the portfolio in USD",
            "examples": [
              10000.0
            ]
          },
          "token_balances": {
            "items": {
              "$ref": "#/components/schemas/TokenBalance"
            },
            "type": "array",
            "title": "Token Balances",
            "description": "List of token balances in the portfolio"
          }
        },
        "type": "object",
        "required": [
          "total_value_in_usd",
          "token_balances"
        ],
        "title": "Portfolio"
      },
      "PortfolioRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "PortfolioRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "PriceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which to get the price<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token"
        ],
        "title": "PriceRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "token": "WBTC"
        }
      },
      "PriceResponse": {
        "properties": {
          "token_price_in_usd": {
            "type": "string",
            "title": "Token Price In Usd",
            "description": "Price of the token in USD",
            "examples": [
              2000.0
            ]
          }
        },
        "type": "object",
        "required": [
          "token_price_in_usd"
        ],
        "title": "PriceResponse"
      },
      "SignedAuthorization": {
        "properties": {
          "nonce": {
            "type": "integer",
            "title": "Nonce"
          },
          "address": {
            "type": "string",
            "title": "Address"
          },
          "chainId": {
            "type": "integer",
            "title": "Chainid"
          },
          "r": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "R"
          },
          "s": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "S"
          },
          "yParity": {
            "type": "integer",
            "title": "Yparity"
          }
        },
        "type": "object",
        "required": [
          "nonce",
          "address",
          "chainId",
          "r",
          "s",
          "yParity"
        ],
        "title": "SignedAuthorization"
      },
      "Token": {
        "type": "string",
        "enum": [
          "1INCH",
          "AAVE",
          "BAL",
          "cbBTC",
          "cbETH",
          "CRV",
          "crvUSD",
          "DAI",
          "ENS",
          "ETHx",
          "FRAX",
          "FXS",
          "GHO",
          "KNC",
          "LDO",
          "LINK",
          "LUSD",
          "MKR",
          "osETH",
          "PYUSD",
          "rETH",
          "RPL",
          "rsETH",
          "sDAI",
          "SNX",
          "STG",
          "sUSDe",
          "tBTC",
          "UNI",
          "USDC",
          "USDe",
          "USDS",
          "USDT",
          "WBTC",
          "weETH",
          "WETH",
          "wstETH",
          "ARB",
          "EURS",
          "MAI",
          "USDCe",
          "AERO",
          "EUR",
          "VIRTUAL"
        ],
        "title": "Token",
        "description": "A class representing the token.\n\nThis class is used to represent the token in the system. Notice individual\nendpoints' documentation where per chain tokens are presented."
      },
      "TokenBalance": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of tokens a particular address holds",
            "examples": [
              1.5
            ]
          },
          "decimals": {
            "type": "integer",
            "title": "Decimals",
            "description": "Number of decimals of the token",
            "examples": [
              18
            ]
          },
          "token_symbol": {
            "$ref": "#/components/schemas/Token",
            "description": "Symbol of the token<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "Address of the token",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          },
          "price": {
            "type": "string",
            "title": "Price",
            "description": "Price of the token in USD",
            "examples": [
              2000.0
            ]
          },
          "token_value_in_usd": {
            "type": "string",
            "title": "Token Value In Usd",
            "description": "Value of the token balance in USD",
            "examples": [
              2000.0
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "decimals",
          "token_symbol",
          "token_address",
          "price",
          "token_value_in_usd"
        ],
        "title": "TokenBalance"
      },
      "TokenInfo": {
        "properties": {
          "tokens": {
            "items": {
              "$ref": "#/components/schemas/Token"
            },
            "type": "array",
            "title": "Tokens",
            "description": "List of supported tokens for a given chain"
          }
        },
        "type": "object",
        "required": [
          "tokens"
        ],
        "title": "TokenInfo"
      },
      "TokensRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        },
        "type": "object",
        "required": [
          "chain"
        ],
        "title": "TokensRequest",
        "example": {
          "chain": "arbitrum:mainnet"
        }
      },
      "TransferERC20Request": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "Amount of token to transfer",
            "examples": [
              1.5
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to transfer.<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the tokens.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc44"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "token",
          "to",
          "chain",
          "sender"
        ],
        "title": "TransferERC20Request",
        "description": "Request model for transferring ERC20 tokens.",
        "example": {
          "amount": 0.1,
          "chain": "arbitrum:mainnet",
          "sender": "0x7Fd9DBad4d8B8F97BEdAC3662A0129a5774AdA8E",
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token": "USDC"
        }
      },
      "TransferEthRequest": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "Amount of ETH to transfer",
            "examples": [
              1.5
            ]
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the ETH.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc44"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "to",
          "chain",
          "sender"
        ],
        "title": "TransferEthRequest",
        "description": "Request model for transferring native ETH.",
        "example": {
          "amount": 0.00048,
          "chain": "arbitrum:mainnet",
          "sender": "0x7Fd9DBad4d8B8F97BEdAC3662A0129a5774AdA8E",
          "to": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "UniswapBuyExactlyParams": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              1.5
            ]
          },
          "amount_in_maximum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In Maximum",
            "description": "The maximum amount of the token to swap from",
            "examples": [
              1.6
            ]
          },
          "wrap_eth": {
            "type": "boolean",
            "title": "Wrap Eth",
            "description": "Whether to wrap ETH to WETH, only use when swapping WETH into something",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "fee",
          "amount_out",
          "amount_in_maximum"
        ],
        "title": "UniswapBuyExactlyParams"
      },
      "UniswapBuyExactlyRequest": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              1.5
            ]
          },
          "amount_in_maximum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In Maximum",
            "description": "The maximum amount of the token to swap from",
            "examples": [
              1.6
            ]
          },
          "wrap_eth": {
            "type": "boolean",
            "title": "Wrap Eth",
            "description": "Whether to wrap ETH to WETH, only use when swapping WETH into something",
            "default": false,
            "examples": [
              true
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "fee",
          "amount_out",
          "amount_in_maximum",
          "chain",
          "sender"
        ],
        "title": "UniswapBuyExactlyRequest",
        "description": "Request model for buying exactly an amount of tokens.",
        "example": {
          "amount_in_maximum": 1.1,
          "amount_out": 1,
          "chain": "arbitrum:mainnet",
          "fee": "0.01",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_in": "USDC",
          "token_out": "USDT",
          "wrap_eth": false
        }
      },
      "UniswapBuyQuoteInfoResponse": {
        "properties": {
          "amount_in": {
            "type": "string",
            "title": "Amount In",
            "description": "The amount of token_in you would need to give to the pool."
          },
          "price_after": {
            "type": "string",
            "title": "Price After",
            "description": "The price of the pool after this trade would happen. (How much token0 you need to buy 1 token1.)"
          }
        },
        "type": "object",
        "required": [
          "amount_in",
          "price_after"
        ],
        "title": "UniswapBuyQuoteInfoResponse"
      },
      "UniswapCheckInRangeRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_id"
        ],
        "title": "UniswapCheckInRangeRequest",
        "description": "Endpoint parameters for checking if liquidity position is in active tick range on\nuniswap v3.",
        "example": {
          "chain": "arbitrum:mainnet",
          "token_id": 4318185
        }
      },
      "UniswapCheckInRangeResponse": {
        "properties": {
          "in_range": {
            "type": "boolean",
            "title": "In Range",
            "description": "Whether the position is in active tick range or not. If not in range, the position is not earning trading fees."
          }
        },
        "type": "object",
        "required": [
          "in_range"
        ],
        "title": "UniswapCheckInRangeResponse"
      },
      "UniswapGetBuyQuoteRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The fee to pay for the swap",
            "examples": [
              "0.3"
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              3000
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "fee",
          "amount_out"
        ],
        "title": "UniswapGetBuyQuoteRequest",
        "example": {
          "amount_out": 1,
          "chain": "arbitrum:mainnet",
          "fee": "0.01",
          "token_in": "USDC",
          "token_out": "USDT"
        }
      },
      "UniswapGetLiquidityProvisionPositionsRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user to check the balance of",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "UniswapGetLiquidityProvisionPositionsRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "UniswapGetPoolPriceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The fee of the pool",
            "examples": [
              "0.3"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "fee"
        ],
        "title": "UniswapGetPoolPriceRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "fee": "0.01",
          "token_in": "USDC",
          "token_out": "USDT"
        }
      },
      "UniswapGetSellQuoteRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "USDC"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The fee to pay for the swap",
            "examples": [
              "0.3"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "fee",
          "amount_in"
        ],
        "title": "UniswapGetSellQuoteRequest",
        "example": {
          "amount_in": 1,
          "chain": "arbitrum:mainnet",
          "fee": "0.01",
          "token_in": "USDC",
          "token_out": "USDT"
        }
      },
      "UniswapIncreaseLiquidityProvisionParams": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min"
        ],
        "title": "UniswapIncreaseLiquidityProvisionParams"
      },
      "UniswapIncreaseLiquidityProvisionRequest": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min",
          "chain",
          "sender"
        ],
        "title": "UniswapIncreaseLiquidityProvisionRequest",
        "description": "Request model for increasing liquidity provision in Uniswap V3.",
        "example": {
          "amount0_desired": 0.1,
          "amount0_min": 0.05,
          "amount1_desired": 0.1,
          "amount1_min": 0.05,
          "chain": "arbitrum:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_id": 4318185
        }
      },
      "UniswapLPPositionsInfoResponse": {
        "properties": {
          "positions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/UniswapPositionsSolidityResponse"
            },
            "type": "object",
            "title": "Positions",
            "description": " Liquidity provision positions belonging to a particular user keyed by the\n        token of owner index of the position. "
          }
        },
        "type": "object",
        "required": [
          "positions"
        ],
        "title": "UniswapLPPositionsInfoResponse"
      },
      "UniswapMintLiquidityProvisionParams": {
        "properties": {
          "token0": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the first token in the pair<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token1": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the second token in the pair<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "tick_lower": {
            "type": "integer",
            "maximum": 887272.0,
            "minimum": -887272.0,
            "title": "Tick Lower",
            "description": "The lower tick of the range to mint the position in",
            "examples": [
              -1000
            ]
          },
          "tick_upper": {
            "type": "integer",
            "maximum": 887272.0,
            "minimum": -887272.0,
            "title": "Tick Upper",
            "description": "The upper tick of the range to mint the position in",
            "examples": [
              1000
            ]
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "recipient": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipient",
            "description": "The address that will receive the LP tokens",
            "examples": [
              "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
            ]
          }
        },
        "type": "object",
        "required": [
          "token0",
          "token1",
          "fee",
          "tick_lower",
          "tick_upper",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min"
        ],
        "title": "UniswapMintLiquidityProvisionParams"
      },
      "UniswapMintLiquidityProvisionRequest": {
        "properties": {
          "token0": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the first token in the pair<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token1": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the second token in the pair<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "tick_lower": {
            "type": "integer",
            "maximum": 887272.0,
            "minimum": -887272.0,
            "title": "Tick Lower",
            "description": "The lower tick of the range to mint the position in",
            "examples": [
              -1000
            ]
          },
          "tick_upper": {
            "type": "integer",
            "maximum": 887272.0,
            "minimum": -887272.0,
            "title": "Tick Upper",
            "description": "The upper tick of the range to mint the position in",
            "examples": [
              1000
            ]
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "recipient": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipient",
            "description": "The address that will receive the LP tokens",
            "examples": [
              "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token0",
          "token1",
          "fee",
          "tick_lower",
          "tick_upper",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min",
          "chain",
          "sender"
        ],
        "title": "UniswapMintLiquidityProvisionRequest",
        "description": "Request model for minting a new liquidity position.",
        "example": {
          "amount0_desired": 0.1,
          "amount0_min": 0,
          "amount1_desired": 0.1,
          "amount1_min": 0,
          "chain": "arbitrum:mainnet",
          "fee": "0.01",
          "recipient": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "tick_lower": -1000,
          "tick_upper": 1000,
          "token0": "USDC",
          "token1": "DAI"
        }
      },
      "UniswapPoolPriceResponse": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The first token "
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The second token in the pool"
          },
          "price": {
            "type": "string",
            "title": "Price",
            "description": "The price of the pool. This is expressed as an instantanteous amount of how many token0 you need to buy 1 token1. In any swap this will not change during the trade; use the quote endpoint to get a better idea of how much you will pay!"
          },
          "tick": {
            "type": "integer",
            "title": "Tick",
            "description": "The current tick in the pool. This is a number that represents the price of the pool according to the uniswap v3 concentrated liquidity concept."
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "price",
          "tick"
        ],
        "title": "UniswapPoolPriceResponse"
      },
      "UniswapPositionsSolidityResponse": {
        "properties": {
          "nonce": {
            "type": "integer",
            "title": "Nonce"
          },
          "operator": {
            "type": "string",
            "title": "Operator"
          },
          "token0": {
            "type": "string",
            "title": "Token0"
          },
          "token1": {
            "type": "string",
            "title": "Token1"
          },
          "fee": {
            "type": "integer",
            "title": "Fee"
          },
          "tick_lower": {
            "type": "integer",
            "title": "Tick Lower"
          },
          "tick_upper": {
            "type": "integer",
            "title": "Tick Upper"
          },
          "liquidity": {
            "type": "integer",
            "title": "Liquidity"
          },
          "fee_growth_inside0_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside0 Last X128"
          },
          "fee_growth_inside1_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside1 Last X128"
          },
          "tokens_owed0": {
            "type": "integer",
            "title": "Tokens Owed0"
          },
          "tokens_owed1": {
            "type": "integer",
            "title": "Tokens Owed1"
          }
        },
        "type": "object",
        "required": [
          "nonce",
          "operator",
          "token0",
          "token1",
          "fee",
          "tick_lower",
          "tick_upper",
          "liquidity",
          "fee_growth_inside0_last_x128",
          "fee_growth_inside1_last_x128",
          "tokens_owed0",
          "tokens_owed1"
        ],
        "title": "UniswapPositionsSolidityResponse"
      },
      "UniswapSellExactlyParams": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          },
          "amount_out_minimum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Minimum",
            "description": "The minimum amount of the token to swap to, defaults to 0",
            "default": "0",
            "examples": [
              1.4
            ]
          },
          "wrap_eth": {
            "type": "boolean",
            "title": "Wrap Eth",
            "description": "Whether to wrap ETH to WETH, only use when swapping WETH into something",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "fee",
          "amount_in"
        ],
        "title": "UniswapSellExactlyParams",
        "description": "Parameters model for selling exactly an amount of tokens."
      },
      "UniswapSellExactlyRequest": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the [supported tokens per chain](/#/#token-table).<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          },
          "amount_out_minimum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Minimum",
            "description": "The minimum amount of the token to swap to, defaults to 0",
            "default": "0",
            "examples": [
              1.4
            ]
          },
          "wrap_eth": {
            "type": "boolean",
            "title": "Wrap Eth",
            "description": "Whether to wrap ETH to WETH, only use when swapping WETH into something",
            "default": false,
            "examples": [
              true
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "fee",
          "amount_in",
          "chain",
          "sender"
        ],
        "title": "UniswapSellExactlyRequest",
        "description": "Request model for selling exactly an amount of tokens.",
        "example": {
          "amount_in": 1,
          "amount_out_minimum": 0.5,
          "chain": "arbitrum:mainnet",
          "fee": "0.01",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_in": "USDC",
          "token_out": "USDT",
          "wrap_eth": false
        }
      },
      "UniswapSellQuoteInfoResponse": {
        "properties": {
          "amount_out": {
            "type": "string",
            "title": "Amount Out",
            "description": "The amount of token_out you would receive from the pool."
          },
          "price_after": {
            "type": "string",
            "title": "Price After",
            "description": "The price of the pool after this trade would happen. (How much token0 you need to buy 1 token1.)"
          }
        },
        "type": "object",
        "required": [
          "amount_out",
          "price_after"
        ],
        "title": "UniswapSellQuoteInfoResponse"
      },
      "UniswapWithdrawLiquidityProvisionParams": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "percentage_for_withdrawal": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Percentage For Withdrawal",
            "description": "How much liquidity to take out in percentage.",
            "examples": [
              "25",
              "50",
              "75",
              "100"
            ]
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "percentage_for_withdrawal"
        ],
        "title": "UniswapWithdrawLiquidityProvisionParams",
        "description": "Endpoint parameters for liquidity provision withdrawal on uniswap v3.\n\nThis action is performed in a multicall on the NonfungiblePosition Manager: https://github.com/Uniswap/v3-periphery/blob/0682387198a24c7cd63566a2c58398533860a5d1/contracts/base/Multicall.sol#L11-L27\nFirst, we call decrease liquidity then collect the tokens owed to the user."
      },
      "UniswapWithdrawLiquidityProvisionRequest": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "percentage_for_withdrawal": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Percentage For Withdrawal",
            "description": "How much liquidity to take out in percentage.",
            "examples": [
              "25",
              "50",
              "75",
              "100"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "percentage_for_withdrawal",
          "chain",
          "sender"
        ],
        "title": "UniswapWithdrawLiquidityProvisionRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "percentage_for_withdrawal": 1,
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B",
          "token_id": 4318185
        }
      },
      "UnsignedMulticallTransaction": {
        "properties": {
          "chainId": {
            "type": "integer",
            "title": "Chainid",
            "description": "The chain id of the transaction"
          },
          "data": {
            "type": "string",
            "title": "Data",
            "description": "The data of the transaction"
          },
          "from": {
            "type": "string",
            "title": "From",
            "description": "The sender of the transaction"
          },
          "gas": {
            "type": "integer",
            "title": "Gas",
            "description": "The gas of the transaction"
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the transaction"
          },
          "value": {
            "type": "integer",
            "title": "Value",
            "description": "The value of the transaction"
          },
          "nonce": {
            "type": "integer",
            "title": "Nonce",
            "description": "The nonce of the address"
          },
          "maxFeePerGas": {
            "type": "integer",
            "title": "Maxfeepergas",
            "description": "The max fee per gas of the transaction"
          },
          "maxPriorityFeePerGas": {
            "type": "integer",
            "title": "Maxpriorityfeepergas",
            "description": "The max priority fee per gas of the transaction"
          },
          "authorizationList": {
            "items": {
              "$ref": "#/components/schemas/SignedAuthorization"
            },
            "type": "array",
            "title": "Authorizationlist",
            "description": "EIP-7702 authorization",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "chainId",
          "data",
          "from",
          "gas",
          "to",
          "value",
          "nonce",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ],
        "title": "UnsignedMulticallTransaction"
      },
      "UnsignedTransaction": {
        "properties": {
          "chainId": {
            "type": "integer",
            "title": "Chainid",
            "description": "The chain id of the transaction"
          },
          "data": {
            "type": "string",
            "title": "Data",
            "description": "The data of the transaction"
          },
          "from": {
            "type": "string",
            "title": "From",
            "description": "The sender of the transaction"
          },
          "gas": {
            "type": "integer",
            "title": "Gas",
            "description": "The gas of the transaction"
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the transaction"
          },
          "value": {
            "type": "integer",
            "title": "Value",
            "description": "The value of the transaction"
          },
          "nonce": {
            "type": "integer",
            "title": "Nonce",
            "description": "The nonce of the address"
          },
          "maxFeePerGas": {
            "type": "integer",
            "title": "Maxfeepergas",
            "description": "The max fee per gas of the transaction"
          },
          "maxPriorityFeePerGas": {
            "type": "integer",
            "title": "Maxpriorityfeepergas",
            "description": "The max priority fee per gas of the transaction"
          }
        },
        "type": "object",
        "required": [
          "chainId",
          "data",
          "from",
          "gas",
          "to",
          "value",
          "nonce",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ],
        "title": "UnsignedTransaction"
      },
      "UnwrapWethRequest": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of WETH to unwrap.",
            "examples": [
              1.5
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "chain",
          "sender"
        ],
        "title": "UnwrapWethRequest",
        "description": "Request model for unwrapping WETH back to native ETH.",
        "example": {
          "amount": 0.0000048,
          "chain": "arbitrum:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VisualizePortfolioRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "VisualizePortfolioRequest",
        "example": {
          "chain": "arbitrum:mainnet",
          "user": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      },
      "WrapEthRequest": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of ETH to wrap.",
            "examples": [
              1.5
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "chain",
          "sender"
        ],
        "title": "WrapEthRequest",
        "description": "Request model for wrapping ETH into WETH.",
        "example": {
          "amount": 0.0000048,
          "chain": "arbitrum:mainnet",
          "sender": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "Your Compass API key. Get your key [here](/auth/get_api_token)."
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
