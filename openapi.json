{
  "openapi": "3.1.0",
  "info": {
    "title": "Compass API",
    "description": "#### Welcome to the DeFi API from [Compass Labs](https://www.compasslabs.ai)!\n\nOur API allows you to interact and transact in DeFi with ease.\n\nWe help you construct your transactions via a **simple REST API**.  \nYou maintain custody at all times and **sign** all transactions **yourself**.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.compasslabs.ai",
      "description": "Production server"
    }
  ],
  "paths": {
    "/v0/aave/borrow": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Borrow against your collateral",
        "description": "You will pay interest for your borrows. Price changes in the assets may lead to\n    some or all of your collateral being liquidated, if the borrow position becomes unhealthy.",
        "operationId": "borrow_v0_aave_borrow_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveBorrowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/repay": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Repay some or all tokens you borrowed",
        "description": "This endpoint allows users to repay a portion or the entirety of their borrowed tokens on\n        the Aave platform. By repaying borrowed amounts, users can improve their health factor,\n        which is a measure of the safety of their loan position. A higher health factor reduces the\n        risk of liquidation, ensuring a more secure borrowing experience. The endpoint requires\n        specifying the chain and the details of the repayment transaction, including the amount and\n        the asset to be repaid.",
        "operationId": "repay_v0_aave_repay_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveRepayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/supply": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Supply collateral to earn interest or borrow against",
        "description": "By supplying assets, users can earn interest on their deposits\n\n        The supplied collateral can be used as a basis for borrowing other assets, allowing users to\n        leverage their positions. In combination with a trading protocol, this can create leverage.  \n\n        Overall, this endpoint is a critical component for users looking to maximize their asset\n        utility within the AAVEv3 ecosystem, providing both earning potential and borrowing\n        flexibility.",
        "operationId": "supply_v0_aave_supply_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveSupplyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/withdraw": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Withdraw some or all of your collateral",
        "description": "This endpoint facilitates the withdrawal of collateral from the Aave protocol. Users can\n        withdraw a portion or all of their collateral, which may increase the risk of liquidation if\n        there are outstanding borrows. The withdrawal process also includes the collection of any\n        interest earned on the collateral. It is important for users to carefully consider their\n        outstanding debts and the potential impact on their liquidation threshold before proceeding\n        with a withdrawal. This endpoint is designed to provide a seamless and efficient way to\n        manage your collateral within the Aave ecosystem.",
        "operationId": "withdraw_v0_aave_withdraw_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveWithdrawRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/asset_price/get": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Get the price of an asset in USD according to Aave",
        "description": "This endpoint retrieves the current price of a specified asset in USD as\n        determined by the Aave protocol. It utilizes the Aave V3 Oracle to fetch the\n        asset price, ensuring accurate and up-to-date information. The request\n        requires the asset identifier and the blockchain network (chain) on which the\n        asset resides. The response provides the asset price in a standardized format,\n        converted from Wei to the base currency decimals defined by Aave.",
        "operationId": "get_asset_price_v0_aave_asset_price_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetAssetPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveAssetPriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/liquidity/change/get": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Gets the change in liquidity index between two blocks, therefore the amount a\n    position will have increased or decreased over the time",
        "description": "This endpoint retrieves the change in the reserve liquidity index between two provided\n        blocks. This is then converted to a percentage change. The liquidity index represents the\n        change in debt and interest accrual over each block. Aave does not store individual user\n        balances directly. Instead, it keeps a scaled balance and uses the liquidity index to\n        compute real balances dynamically. If a user was to have deposited tokens at the start\n        block, a positive liquidity index change will represent accrued interest and a profit. If\n        tokens were borrowed at the start block, this debt will increase, compound on itself and\n        represent large debt. The reverse in both cases is true if the liquidity index is negative.",
        "operationId": "get_liquidity_change_v0_aave_liquidity_change_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetLiquidityChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveLiquidityChangeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/user_position_summary/get": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Get a summary of the user's position on AAVE. These values will be sums or averages\n    across all open positions.",
        "description": "This endpoint retrieves a comprehensive summary of a user's position on the AAVE platform.\n        It provides key financial metrics including the total collateral deposited, total debt\n        accrued, available borrowing capacity, liquidation threshold, maximum loan-to-value ratio,\n        and the health factor of the user's account. These metrics are calculated by aggregating\n        data across all open positions held by the user, offering a holistic view of their financial\n        standing within the AAVE ecosystem.",
        "operationId": "get_user_position_summary_v0_aave_user_position_summary_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetUserPositionSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveUserPositionSummaryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aave/user_position_per_token/get": {
      "post": {
        "tags": [
          "Aave V3",
          "Aave V3"
        ],
        "summary": "Get the user's position for a specific token.",
        "description": "This endpoint retrieves the user's position for a specific token on the AAVE\n        platform. It provides key financial metrics including the current aToken balance,\n        current stable debt, current variable debt, principal stable debt, principal variable\n        debt, stable borrow rate, stable borrow rate for new loans, variable borrow rate, and\n        liquidity rate. These metrics are calculated by aggregating data across all open\n        positions held by the user for the specified token, offering a detailed view of their\n        financial standing within the AAVE ecosystem.",
        "operationId": "get_user_position_per_token_v0_aave_user_position_per_token_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AaveGetUserPositionPerTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AaveUserPositionPerTokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/swap/tokens": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Swap one token for another token on Aerodrome",
        "description": "Swap one token for another on Aerodrome.\n        Ensure you specify the minimum amount you expect to receive to\n        avoid trading at an unfavorable exchange rate. This endpoint\n        facilitates the exchange of tokens by interacting with the\n        Aerodrome smart contract, ensuring that the transaction is\n        executed only if the specified minimum output is met.",
        "operationId": "process_request_v0_aerodrome_basic_swap_tokens_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSwapTokensCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/swap/eth_for_token": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Swap ETH for some of a token on Aerodrome",
        "description": "This endpoint allows you to swap a specified amount of ETH for a\n        desired token on the Aerodrome platform. To protect against\n        unfavorable exchange rates, you must specify the minimum amount\n        of the token you wish to receive. The transaction will only be\n        executed if this minimum amount is met, ensuring you do not\n        accidentally trade at a disadvantageous rate.",
        "operationId": "process_request_v0_aerodrome_basic_swap_eth_for_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSwapEthForTokenCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/swap/token_for_eth": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Swap a token for ETH on Aerodrome",
        "description": "Swap a specified amount of a token for ETH using the Aerodrome platform.\n        To protect against unfavorable exchange rates, you must specify the minimum\n        amount of ETH you wish to receive. The transaction will only be executed if\n        this minimum amount is met, ensuring you do not trade at a disadvantageous rate.",
        "operationId": "process_request_v0_aerodrome_basic_swap_token_for_eth_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSwapTokenForEthCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/add_liquidity": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Provide liquidity to a pool on Aerodrome",
        "description": "This endpoint allows users to provide liquidity to a specified pool on the\n        Aerodrome platform. Users must specify the tokens, desired amounts, minimum\n        amounts, and a deadline for the transaction. The operation will ensure the\n        pool exists and will use the sender's address if no recipient is specified.",
        "operationId": "process_request_v0_aerodrome_basic_liquidity_provision_add_liquidity_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeLiquidityProvisionCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/add_liquidity_eth": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Provide liquidity to a pool on Aerodrome using WETH and another token",
        "description": "This endpoint allows users to provide liquidity to a specified pool on the\n        Aerodrome platform using Wrapped Ether (WETH) and another token. Users must\n        specify the token pair, desired amounts, minimum amounts, and a deadline for\n        the transaction. The operation will ensure the pool exists and will use the\n        sender's address if no recipient is specified. The transaction will be executed\n        through the Aerodrome Basic Router contract, and the specified amount of WETH\n        will be sent along with the transaction.",
        "operationId": "process_request_v0_aerodrome_basic_liquidity_provision_add_liquidity_eth_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeLiquidityProvisionEthCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/remove_liquidity": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Remove liquidity from a pool on Aerodrome",
        "description": "This endpoint allows users to remove liquidity from a specified pool on the\n        Aerodrome platform. Users must specify the token pair, the amount of liquidity\n        to remove, minimum amounts for each token, and a deadline for the transaction.\n        The operation will ensure the pool exists and will use the sender's address if\n        no recipient is specified. The transaction will be executed through the\n        Aerodrome Basic Router contract, and the specified amount of liquidity will be\n        withdrawn from the pool.",
        "operationId": "process_request_v0_aerodrome_basic_liquidity_provision_remove_liquidity_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeRemoveLiquidityCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_basic/liquidity_provision/remove_liquidity_eth": {
      "post": {
        "tags": [
          "Aerodrome Basic"
        ],
        "summary": "Remove liquidity from a pool on Aerodrome using WETH and another token",
        "description": "This endpoint allows users to remove liquidity from a pool on the Aerodrome\n        platform using WETH and another token. Users must specify the token pair, the\n        amount of liquidity to remove, minimum amounts for each token, and a deadline\n        for the transaction. The operation will ensure the pool exists and will use\n        the sender's address if no recipient is specified. The transaction will be\n        executed through the Aerodrome Basic Router contract, and the specified amount\n        of liquidity will be withdrawn from the pool.",
        "operationId": "process_request_v0_aerodrome_basic_liquidity_provision_remove_liquidity_eth_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeRemoveLiquidityEthCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/pool_price/get": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Get the current price of a pool (how many token0 you can buy for 1 token1). This is only the instantaneous price; during any trade the price will change. Use the quote endpoint to get a more realistic idea of the ratios of the two assets you could trade.",
        "description": "This endpoint retrieves the current price of a pool, indicating how many token0\n        you can purchase for 1 token1. Note that this is an instantaneous price and may\n        change during any trade. For a more accurate representation of the trade ratios\n        between the two assets, consider using the quote endpoint.",
        "operationId": "process_request_v0_aerodrome_slipstream_pool_price_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamGetPoolPrice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AerodromeSlipstreamPoolPrice"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/swap/sell_exactly": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Trade a specific amount of a token into another.",
        "description": "This endpoint allows users to trade a specific amount of one token\n        into another token using the Aerodrome Slipstream protocol. The\n        transaction is executed by specifying the exact amount of the input\n        token to be sold, and the system calculates the amount of the output\n        token that will be received. The operation ensures that the trade is\n        conducted within the constraints of the current market conditions,\n        taking into account the liquidity and price impact. This endpoint is\n        suitable for users who want to sell a precise quantity of a token\n        and are willing to accept the resulting amount of the other token.",
        "operationId": "process_request_v0_aerodrome_slipstream_swap_sell_exactly_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSlipstreamSellExactlyCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/swap/buy_exactly": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Trade the amount of a token it takes to end up with a specified quantity of the other token",
        "description": "This endpoint facilitates the trading of tokens by allowing users to\n        specify the exact amount of the output token they wish to receive.\n        Utilizing the Aerodrome Slipstream protocol, the system calculates\n        the necessary amount of the input token required to achieve the\n        desired output. This operation is particularly useful for users who\n        have a specific target amount of the output token in mind and are\n        willing to provide the corresponding input token amount. The\n        transaction is executed with consideration of current market\n        conditions, including liquidity and price impact, ensuring that the\n        trade is completed efficiently and effectively.",
        "operationId": "process_request_v0_aerodrome_slipstream_swap_buy_exactly_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSlipstreamBuyExactlyCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/positions/get": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Get the number of LP positions for a given sender",
        "description": "Retrieve the total number of Liquidity Provider (LP) positions associated with a specific sender.\n        This endpoint allows users to query and obtain detailed information about their LP positions,\n        including the number of active positions they hold. The response model, AerodromeLPPositionsInfo,\n        provides a structured representation of the LP positions data, ensuring clarity and ease of use.\n        This functionality is essential for users managing their liquidity provision activities,\n        enabling them to make informed decisions based on their current positions.",
        "operationId": "process_request_v0_aerodrome_slipstream_liquidity_provision_positions_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AerodromeSlipstreamGetLiquidityProvisionPositions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AerodromeLPPositionsInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/mint": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Open a new LP position",
        "description": "Initiate a new Liquidity Provider (LP) position by minting tokens.\n        This endpoint allows users to open a new LP position, enabling them to participate in liquidity provision.\n        The minting process involves creating a new position with specified parameters,\n        such as token amounts and pool details. The response will confirm the successful creation of the LP position,\n        providing users with the necessary information to manage their newly minted position.\n        This functionality is crucial for users looking to expand their liquidity provision activities,\n        offering them the opportunity to engage in decentralized finance (DeFi) markets effectively.",
        "operationId": "process_request_v0_aerodrome_slipstream_liquidity_provision_mint_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSlipstreamMintLiquidityProvisionCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/increase": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Increase an LP position",
        "description": "Increase the liquidity of an existing Liquidity Provider (LP) position.\n        This endpoint allows users to add more tokens to their current LP position,\n        enhancing their participation in liquidity provision. By increasing liquidity,\n        users can potentially earn more rewards and improve their position in the pool.\n        The process involves specifying additional token amounts and updating the pool details.\n        The response will confirm the successful increase of the LP position,\n        providing users with updated information about their enhanced position.\n        This functionality is vital for users aiming to optimize their liquidity provision strategy,\n        enabling them to adapt to market conditions and maximize their returns in decentralized finance (DeFi) markets.",
        "operationId": "process_request_v0_aerodrome_slipstream_liquidity_provision_increase_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSlipstreamIncreaseLiquidityProvisionCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/aerodrome_slipstream/liquidity_provision/withdraw": {
      "post": {
        "tags": [
          "Aerodrome Slipstream"
        ],
        "summary": "Withdraw an LP position",
        "description": "Withdraw an existing Liquidity Provider (LP) position.\n        This endpoint allows users to remove their tokens from an LP position,\n        effectively closing their participation in the liquidity pool.\n        The withdrawal process involves specifying the LP position to be closed,\n        and the response will confirm the successful removal of liquidity,\n        providing users with details about the withdrawn tokens and any remaining balances.\n        This functionality is essential for users who wish to exit their liquidity provision activities,\n        enabling them to reclaim their assets and potentially reallocate them to other investment opportunities.\n        The endpoint ensures a smooth and secure withdrawal process,\n        facilitating users' strategic management of their decentralized finance (DeFi) portfolios.",
        "operationId": "process_request_v0_aerodrome_slipstream_liquidity_provision_withdraw_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_AerodromeSlipstreamWithdrawLiquidityProvisionCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/allowance/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Show the allowance of a user on a protocol",
        "description": "In decentralized finance (DeFi) protocols such as Uniswap or AAVE,\n        users must set a token allowance to authorize the protocol to spend\n        a specified amount of their tokens on their behalf. This is a crucial\n        step before engaging in any transactions or operations within these\n        protocols, ensuring that the protocol has the necessary permissions\n        to manage the user's tokens securely and efficiently.",
        "operationId": "process_request_v0_generic_allowance_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetErc20Allowance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowanceInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/allowance/set": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Change the allowance of a user on a protocol",
        "description": "This endpoint allows users to modify the token allowance for a specific\n        protocol. In decentralized finance (DeFi), setting an allowance is a\n        necessary step to authorize a protocol to spend a specified amount of\n        tokens on behalf of the user. This operation is crucial for ensuring\n        that the protocol can manage the user's tokens securely and efficiently,\n        enabling seamless transactions and operations within the DeFi ecosystem.",
        "operationId": "process_request_v0_generic_allowance_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_IncreaseErc20AllowanceCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/allowance/set_any": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Sets allowance for any arbitrary ERC20 token address.",
        "description": "This endpoint allows users to set an allowance for any arbitrary ERC20\n        token address. In decentralized finance (DeFi), setting an allowance\n        is a critical operation that permits a protocol to spend a specified\n        amount of tokens on behalf of the user. This functionality is essential\n        for enabling secure and efficient token management, facilitating smooth\n        transactions and operations within the DeFi ecosystem. By using this\n        endpoint, users can specify the token address and the amount they wish\n        to authorize, ensuring precise control over their token allowances.",
        "operationId": "process_request_v0_generic_allowance_set_any_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_IncreaseErc20AllowanceAnyCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/balance/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Get an address balance of a token",
        "description": "This endpoint allows users to retrieve the balance of a specified ERC20 token\n        for any given account address on the blockchain. It requires the token symbol\n        and the user's account address as input parameters. The response includes the\n        balance amount, the number of decimals the token uses, the token symbol, and\n        the token's contract address. This functionality is essential for applications\n        that need to display or manage token balances for users.",
        "operationId": "process_request_v0_generic_balance_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetErc20Balance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/wrap_eth": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Change raw ETH into WETH",
        "description": "Wrapping ETH creates an ERC-20 compliant form of ETH that is typically needed for it to be traded on DeFi protocols.",
        "operationId": "process_request_v0_generic_wrap_eth_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_WrapEthRequestCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/unwrap_weth": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Change WETH into raw ETH",
        "description": "Unwrapping ETH transforms the ERC-20 token into the raw form used for paying gas fees and other basic functions.",
        "operationId": "process_request_v0_generic_unwrap_weth_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_UnwrapWethRequestCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/supported_tokens/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Get supported token",
        "description": "Get the list of supported tokens on a chain by the Compass API.",
        "operationId": "get_tokens_v0_generic_supported_tokens_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSupportedTokens"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/ens/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Get the wallet address and registrant of an ENS name",
        "description": "An ENS name is a string ending in `.eth`. E.g. `vitalik.eth`. This endpoint can be used to query the actual ethereum wallet address behind the ENS name.",
        "operationId": "process_request_v0_generic_ens_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestEnsDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnsNameInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/portfolio/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Get the portfolio details for a wallet addressincluding balances and values of all tokens.",
        "description": "Fetch the detailed portfolio of a specific wallet address on a given blockchain. This includes the total value of the portfolio in USD and a breakdown of token balances, including their respective values and quantities.",
        "operationId": "process_request_v0_generic_portfolio_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUserAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/visualize_portfolio/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Visualize the token portfolio of a wallet address as a pie chart",
        "description": "Generate a visual representation of the token portfolio for a wallet address. The response is an SVG image of a pie chart depicting the relative distribution of tokens held, colored and labeled with token symbols, percentages and token values in USD.",
        "operationId": "process_request_v0_generic_visualize_portfolio_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUserAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/transfer/native_token": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Transfer the native token (usually ETH) to an address",
        "description": "Transfer the native token of a chain from your address to another address.",
        "operationId": "process_request_v0_generic_transfer_native_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferEth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/transfer/erc20": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Transfer some of an ERC20 Token",
        "description": "Transfer some amount of ERC20 token (fungible token) to another address.",
        "operationId": "process_request_v0_generic_transfer_erc20_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseTransactionRequest_TransferERC20TokenCallData_"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/generic/price/usd/get": {
      "post": {
        "tags": [
          "Others"
        ],
        "summary": "Get the price of a given token relative to USD",
        "description": "Retrieves the price of the specified token relative to USD using Chainlink's on-chain price feeds. Chainlink is a decentralized oracle that aggregates price data from off-chain sources. This ensures the price is tamper-resistant but the price might be stale with the update frequency of the oracle.",
        "operationId": "process_request_v0_generic_price_usd_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTokenPrice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/swap/buy_exactly": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Buy exact amount",
        "description": "This endpoint allows users to trade a variable amount of one token\n        to receive an exact amount of another token using the Uniswap protocol.\n        The transaction is executed on the specified blockchain network, and\n        the user must provide the necessary transaction details, including the\n        token to buy, the token to pay with, and the exact amount to receive.\n        If the token being paid with is WETH and needs to be wrapped, the\n        appropriate amount will be wrapped automatically.",
        "operationId": "buy_exactly_v0_uniswap_swap_buy_exactly_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapBuyExactlyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/swap/sell_exactly": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Sell exact amount",
        "description": "This endpoint allows users to trade a specific amount of one token\n        into another token using the Uniswap protocol. The transaction is\n        executed on the specified blockchain network, and the user must\n        provide the necessary transaction details, including the token to\n        sell, the token to receive, and the amount to sell. If the token\n        being sold is WETH and needs to be wrapped, the appropriate amount\n        will be wrapped automatically.",
        "operationId": "sell_exactly_v0_uniswap_swap_sell_exactly_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapSellExactlyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/increase": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Increase an LP position",
        "description": "This endpoint allows users to increase their existing Liquidity Provider (LP) positions on\n        the Uniswap platform. By providing the necessary parameters, users can add more liquidity to\n        their current positions, thereby increasing their stake in the liquidity pool. This\n        operation is beneficial for users who wish to enhance their potential earnings from trading\n        fees within the pool. The endpoint requires details such as the token pair, additional\n        amount to be added, and any other parameters necessary for the liquidity increase process.",
        "operationId": "increase_liquidity_v0_uniswap_liquidity_provision_increase_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapIncreaseLiquidityProvision"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/mint": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Open a new LP position",
        "description": "This endpoint allows users to open a new Liquidity Provider (LP) position on the Uniswap\n    platform. By providing the necessary parameters, users can initiate a minting process to create\n    a new LP token, which represents their stake in a specific liquidity pool. This operation is\n    essential for users looking to participate in liquidity provision, enabling them to earn fees\n    from trades that occur within the pool. The endpoint requires details such as the token pair,\n    amount, and any additional parameters needed for the minting process.",
        "operationId": "mint_v0_uniswap_liquidity_provision_mint_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapMintLiquidityProvision"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/withdraw": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Withdraw an LP position",
        "description": "This endpoint allows users to withdraw their Liquidity Provider (LP) positions\n    from the Uniswap platform. By specifying the necessary parameters, users can initiate the\n    withdrawal process to remove their stake from a specific liquidity pool. This operation is\n    crucial for users who wish to reclaim their assets or reallocate their liquidity to different\n    pools or investments. The endpoint requires details such as the token pair, the amount to be\n    withdrawn, and any additional parameters needed for the withdrawal process. Users should ensure\n    they meet any protocol requirements or conditions before initiating a withdrawal to avoid\n    potential issues or penalties.",
        "operationId": "withdraw_v0_uniswap_liquidity_provision_withdraw_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapWithdrawLiquidityProvision"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsignedTransaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/quote/buy_exactly/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Get quote for buying tokens",
        "description": "This endpoint calculates the amount of input tokens required to purchase a specified amount\n        of output tokens from a Uniswap pool. It also provides the resulting price after the\n        transaction. The calculation takes into account the current pool state and the specified fee\n        tier.",
        "operationId": "get_buy_quote_v0_uniswap_quote_buy_exactly_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetBuyQuoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapBuyQuoteInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/quote/sell_exactly/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Get quote for selling tokens",
        "description": "This endpoint calculates the amount of input tokens required to purchase a specified amount of\n    output tokens from a Uniswap pool. It also provides the resulting price after the transaction.\n    The calculation takes into account the current pool state and the specified fee tier.",
        "operationId": "get_sell_quote_v0_uniswap_quote_sell_exactly_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetSellQuoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapSellQuoteInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/pool_price/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Get the price of a token in a Uniswap pool",
        "description": "This endpoint calculates the price of a token in a Uniswap pool. The price is\n        calculated based on the current pool state and the specified fee tier.",
        "operationId": "get_pool_price_v0_uniswap_pool_price_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetPoolPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapPoolPriceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/in_range/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "check if a position is in active tick range",
        "description": "this endpoint allows users to check whether a specific liquidity provider (lp)\n        position is within the active tick range on the uniswap platform. by providing\n        the token id associated with the position, users can verify if the position is\n        currently within the tick range where trading occurs. this information is essential\n        for users to monitor the status of their lp positions and ensure that they are\n        actively participating in the trading activities within the liquidity pool and\n        earning trading fees.",
        "operationId": "in_range_v0_uniswap_liquidity_provision_in_range_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapCheckInRangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapCheckInRangeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/uniswap/liquidity_provision/positions/get": {
      "post": {
        "tags": [
          "Uniswap V3"
        ],
        "summary": "Retrieve LP positions for a sender",
        "description": "This endpoint retrieves the number of Liquidity Provider (LP) positions\n        associated with a specific sender address on the Uniswap platform.\n        Users can query this endpoint to obtain detailed information about their\n        LP positions, including the total number of positions and relevant metadata.\n        This information is crucial for users to manage and analyze their liquidity\n        provision activities effectively.",
        "operationId": "get_positions_v0_uniswap_liquidity_provision_positions_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UniswapGetLiquidityProvisionPositionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UniswapLPPositionsInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AaveAssetPriceResponse": {
        "properties": {
          "price": {
            "type": "string",
            "title": "Price",
            "description": "The price of the asset in USD."
          }
        },
        "type": "object",
        "required": [
          "price"
        ],
        "title": "AaveAssetPriceResponse"
      },
      "AaveBorrowRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to borrow.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to borrow",
            "examples": [
              150.5
            ]
          },
          "interest_rate_mode": {
            "$ref": "#/components/schemas/InterestRateMode",
            "description": "The interest rate mode to borrow",
            "examples": [
              1
            ],
            "ge": 1,
            "le": 2
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "asset",
          "amount",
          "interest_rate_mode"
        ],
        "title": "AaveBorrowRequest"
      },
      "AaveGetAssetPriceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the asset whose price you want.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "asset"
        ],
        "title": "AaveGetAssetPriceRequest"
      },
      "AaveGetLiquidityChangeRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "start_block": {
            "type": "integer",
            "title": "Start Block",
            "description": "The starting block.",
            "examples": [
              21500000
            ]
          },
          "end_block": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Block",
            "description": "The ending block. If nothing provided defaults to latest",
            "examples": [
              21800000
            ]
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the asset to fetch liquidity index change for.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "start_block",
          "asset"
        ],
        "title": "AaveGetLiquidityChangeRequest"
      },
      "AaveGetUserPositionPerTokenRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to fetch the token-specific position of.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the asset to fetch the user's position on.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user",
          "asset"
        ],
        "title": "AaveGetUserPositionPerTokenRequest"
      },
      "AaveGetUserPositionSummaryRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to get the position summary of. Values are in USD.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "AaveGetUserPositionSummaryRequest"
      },
      "AaveLiquidityChangeResponse": {
        "properties": {
          "liquidity_change": {
            "type": "string",
            "title": "Liquidity Change",
            "description": "The change in the liqudiity index between the two times, expressed as a percentage."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "Dateime of starting block"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time",
            "description": "Dateime of ending block"
          }
        },
        "type": "object",
        "required": [
          "liquidity_change",
          "start_time",
          "end_time"
        ],
        "title": "AaveLiquidityChangeResponse"
      },
      "AaveRepayRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to repay.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to repay",
            "examples": [
              1.5
            ]
          },
          "interest_rate_mode": {
            "$ref": "#/components/schemas/InterestRateMode",
            "description": "The interest rate mode to borrow",
            "examples": [
              1
            ],
            "ge": 1,
            "le": 2
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "asset",
          "amount",
          "interest_rate_mode"
        ],
        "title": "AaveRepayRequest"
      },
      "AaveSupplyRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to supply as collateral. You can borrow against it.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to supply",
            "examples": [
              1.5
            ]
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "On Behalf Of",
            "description": "The address on behalf of whom the supply is made. Defaults to the transaction sender.",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "asset",
          "amount"
        ],
        "title": "AaveSupplyRequest"
      },
      "AaveUserPositionPerTokenResponse": {
        "properties": {
          "token_balance": {
            "type": "string",
            "title": "Token Balance",
            "description": "The balance of AAVE aTokens (interest-bearing representations of your deposits)."
          },
          "stable_debt": {
            "type": "string",
            "title": "Stable Debt",
            "description": "The amount of the user's debt with a fixed interest rate."
          },
          "variable_debt": {
            "type": "string",
            "title": "Variable Debt",
            "description": "The amount of the user's debt with a variable interest rate."
          },
          "principal_stable_debt": {
            "type": "string",
            "title": "Principal Stable Debt",
            "description": "The amount of the user's debt that was part of the initial principal of all\n        loans with a stable interest rate."
          },
          "principal_variable_debt": {
            "type": "string",
            "title": "Principal Variable Debt",
            "description": "The amount of the user's debt that was part of the initial principal of all\n        loans with a variable interest rate. This is the value stored by AAVE, which may be slightly\n        inaccurate, but reflects what AAVE believes you initially paid."
          },
          "stable_borrow_rate": {
            "type": "string",
            "title": "Stable Borrow Rate",
            "description": "The current average annualised interest rate for all your stable loans in\n        this pool."
          },
          "stable_borrow_rate_for_new_loans": {
            "type": "string",
            "title": "Stable Borrow Rate For New Loans",
            "description": "The annualised interest rate you would pay on a new stable loan."
          },
          "variable_borrow_rate": {
            "type": "string",
            "title": "Variable Borrow Rate",
            "description": "The current annualised interest rate for variable rate loans in this pool.\n        (This applies to both current and new loans.)"
          },
          "liquidity_rate": {
            "type": "string",
            "title": "Liquidity Rate",
            "description": "The annualised interest rate for deposited supplies."
          }
        },
        "type": "object",
        "required": [
          "token_balance",
          "stable_debt",
          "variable_debt",
          "principal_stable_debt",
          "principal_variable_debt",
          "stable_borrow_rate",
          "stable_borrow_rate_for_new_loans",
          "variable_borrow_rate",
          "liquidity_rate"
        ],
        "title": "AaveUserPositionPerTokenResponse"
      },
      "AaveUserPositionSummaryResponse": {
        "properties": {
          "maximum_loan_to_value_ratio": {
            "type": "string",
            "title": "Maximum Loan To Value Ratio",
            "description": "The loan to value ratio of a user."
          },
          "health_factor": {
            "type": "string",
            "title": "Health Factor",
            "description": "The health factor of a user. If this is above 1 it is safe; below 1 and the\n        user is in risk of liquidation. This number might be very high (which would mean the user is\n        safe!)"
          },
          "total_collateral": {
            "type": "string",
            "title": "Total Collateral",
            "description": "The total collateral (in USD) of a user."
          },
          "total_debt": {
            "type": "string",
            "title": "Total Debt",
            "description": "The total debt (in USD) of a user."
          },
          "available_borrows": {
            "type": "string",
            "title": "Available Borrows",
            "description": "The available borrows (in USD) of a user."
          },
          "liquidation_threshold": {
            "type": "string",
            "title": "Liquidation Threshold",
            "description": "The liquidation threshold of a user. A user might exceed this due to changing\n        asset values."
          }
        },
        "type": "object",
        "required": [
          "maximum_loan_to_value_ratio",
          "health_factor",
          "total_collateral",
          "total_debt",
          "available_borrows",
          "liquidation_threshold"
        ],
        "title": "AaveUserPositionSummaryResponse"
      },
      "AaveWithdrawRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "asset": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the underlying asset to withdraw.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of the asset to withdraw",
            "examples": [
              1.5
            ]
          },
          "recipient": {
            "type": "string",
            "title": "Recipient",
            "description": "The address of the recipient of the withdrawn funds.",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "asset",
          "amount",
          "recipient"
        ],
        "title": "AaveWithdrawRequest"
      },
      "AerodromeLPPositionsInfo": {
        "properties": {
          "positions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AerodromePosition"
            },
            "type": "object",
            "title": "Positions",
            "description": "Liquidity provision positions belonging to a particular user. The key is a tuple of the token0, token1, tick_spacing, tick_lower, and tick_upper of the position."
          }
        },
        "type": "object",
        "required": [
          "positions"
        ],
        "title": "AerodromeLPPositionsInfo"
      },
      "AerodromeLiquidityProvisionCallData": {
        "properties": {
          "token_a": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to provide liquidity for<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_b": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to provide liquidity for<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDT"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to provide liquidity on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to provide liquidity on a volatile pool with a bonding curve of K=xy"
          },
          "amount_a_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount A Desired",
            "description": "The amount of token A you want to provide",
            "examples": [
              1000
            ]
          },
          "amount_b_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount B Desired",
            "description": "The amount of token B you want to provide",
            "examples": [
              1000
            ]
          },
          "amount_a_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount A Min",
            "description": "The minimal amount of token A you are willing to provide",
            "examples": [
              900
            ]
          },
          "amount_b_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount B Min",
            "description": "The minimal amount of token B you are willing to provide",
            "examples": [
              900
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the LP tokens from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          }
        },
        "type": "object",
        "required": [
          "token_a",
          "token_b",
          "stable",
          "amount_a_desired",
          "amount_b_desired",
          "amount_a_min",
          "amount_b_min",
          "deadline"
        ],
        "title": "AerodromeLiquidityProvisionCallData"
      },
      "AerodromeLiquidityProvisionEthCallData": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to provide liquidity for alongside WETH.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to provide liquidity on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to provide liquidity on a volatile pool with a bonding curve of K=xy"
          },
          "amount_token_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Token Desired",
            "description": "The amount of token you want to provide",
            "examples": [
              1000
            ]
          },
          "amount_eth_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Eth Desired",
            "description": "The amount of WETH you want to provide",
            "examples": [
              1.5
            ]
          },
          "amount_token_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Token Min",
            "description": "The minimal amount of token you are willing to provide",
            "examples": [
              900
            ]
          },
          "amount_eth_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Eth Min",
            "description": "The minimal amount of WETH you are willing to provide",
            "examples": [
              1.5
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the LP tokens from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          }
        },
        "type": "object",
        "required": [
          "token",
          "stable",
          "amount_token_desired",
          "amount_eth_desired",
          "amount_token_min",
          "amount_eth_min",
          "deadline"
        ],
        "title": "AerodromeLiquidityProvisionEthCallData"
      },
      "AerodromePosition": {
        "properties": {
          "nonce": {
            "type": "integer",
            "title": "Nonce"
          },
          "operator": {
            "type": "string",
            "title": "Operator"
          },
          "token0": {
            "$ref": "#/components/schemas/Token"
          },
          "token1": {
            "$ref": "#/components/schemas/Token"
          },
          "tick_spacing": {
            "type": "integer",
            "title": "Tick Spacing"
          },
          "tick_lower": {
            "type": "integer",
            "title": "Tick Lower"
          },
          "tick_upper": {
            "type": "integer",
            "title": "Tick Upper"
          },
          "liquidity": {
            "type": "integer",
            "title": "Liquidity"
          },
          "fee_growth_inside0_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside0 Last X128"
          },
          "fee_growth_inside1_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside1 Last X128"
          },
          "tokens_owed0": {
            "type": "integer",
            "title": "Tokens Owed0"
          },
          "tokens_owed1": {
            "type": "integer",
            "title": "Tokens Owed1"
          },
          "token_id": {
            "type": "integer",
            "title": "Token Id"
          }
        },
        "type": "object",
        "required": [
          "nonce",
          "operator",
          "token0",
          "token1",
          "tick_spacing",
          "tick_lower",
          "tick_upper",
          "liquidity",
          "fee_growth_inside0_last_x128",
          "fee_growth_inside1_last_x128",
          "tokens_owed0",
          "tokens_owed1",
          "token_id"
        ],
        "title": "AerodromePosition"
      },
      "AerodromeRemoveLiquidityCallData": {
        "properties": {
          "token_a": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to remove liquidity for<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_b": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to remove liquidity for<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDT"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to remove liquidity from a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to remove liquidity from a volatile pool with a bonding curve of K=xy"
          },
          "liquidity": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Liquidity",
            "description": "The amount of liquidity you want to remove",
            "examples": [
              1000
            ]
          },
          "amount_a_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount A Min",
            "description": "The minimal amount of token A you are willing to receive",
            "examples": [
              900
            ]
          },
          "amount_b_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount B Min",
            "description": "The minimal amount of token B you are willing to receive",
            "examples": [
              900
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the tokens from this liquidity removal, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          }
        },
        "type": "object",
        "required": [
          "token_a",
          "token_b",
          "stable",
          "liquidity",
          "amount_a_min",
          "amount_b_min",
          "deadline"
        ],
        "title": "AerodromeRemoveLiquidityCallData"
      },
      "AerodromeRemoveLiquidityEthCallData": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to remove liquidity for alongside WETH.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to remove liquidity from a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to remove liquidity from a volatile pool with a bonding curve of K=xy"
          },
          "liquidity": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Liquidity",
            "description": "The amount of liquidity you want to remove",
            "examples": [
              1000
            ]
          },
          "amount_token_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Token Min",
            "description": "The minimal amount of token you are willing to receive",
            "examples": [
              900
            ]
          },
          "amount_eth_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Eth Min",
            "description": "The minimal amount of WETH you are willing to receive",
            "examples": [
              900
            ]
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the tokens from this liquidity removal, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "deadline": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Deadline",
            "description": "The deadline for this transaction in seconds since epoch",
            "examples": [
              1630000000
            ]
          }
        },
        "type": "object",
        "required": [
          "token",
          "stable",
          "liquidity",
          "amount_token_min",
          "amount_eth_min",
          "deadline"
        ],
        "title": "AerodromeRemoveLiquidityEthCallData"
      },
      "AerodromeSlipstreamBuyExactlyCallData": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              1.5
            ]
          },
          "amount_in_maximum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In Maximum",
            "description": "The maximum amount of the token to swap from",
            "examples": [
              1.6
            ]
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "tick_spacing",
          "amount_out",
          "amount_in_maximum"
        ],
        "title": "AerodromeSlipstreamBuyExactlyCallData"
      },
      "AerodromeSlipstreamGetLiquidityProvisionPositions": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user to check the balance of",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "AerodromeSlipstreamGetLiquidityProvisionPositions"
      },
      "AerodromeSlipstreamGetPoolPrice": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "tick_spacing"
        ],
        "title": "AerodromeSlipstreamGetPoolPrice"
      },
      "AerodromeSlipstreamIncreaseLiquidityProvisionCallData": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min"
        ],
        "title": "AerodromeSlipstreamIncreaseLiquidityProvisionCallData"
      },
      "AerodromeSlipstreamMintLiquidityProvisionCallData": {
        "properties": {
          "token0": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the first token in the pair<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token1": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the second token in the pair<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          },
          "tick_lower": {
            "type": "integer",
            "title": "Tick Lower",
            "description": "The lower tick of the range to mint the position in",
            "examples": [
              -1000
            ]
          },
          "tick_upper": {
            "type": "integer",
            "title": "Tick Upper",
            "description": "The upper tick of the range to mint the position in",
            "examples": [
              1000
            ]
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "recipient": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipient",
            "description": "The address that will receive the LP tokens",
            "examples": [
              "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
            ]
          }
        },
        "type": "object",
        "required": [
          "token0",
          "token1",
          "tick_spacing",
          "tick_lower",
          "tick_upper",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min"
        ],
        "title": "AerodromeSlipstreamMintLiquidityProvisionCallData"
      },
      "AerodromeSlipstreamPoolPrice": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The first token "
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The second token in the pool"
          },
          "price": {
            "type": "string",
            "title": "Price",
            "description": "The price of the pool. This is expressed as an instantanteous amount of how many token0 you need to buy 1 token1. In any swap this will not change during the trade; use the quote endpoint to get a better idea of how much you will pay!"
          },
          "tick": {
            "type": "integer",
            "title": "Tick",
            "description": "The current tick in the pool. This is a number that represents the price of the pool according to the aerodrome_slipstream v3 concentrated liquidity concept."
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "price",
          "tick"
        ],
        "title": "AerodromeSlipstreamPoolPrice"
      },
      "AerodromeSlipstreamSellExactlyCallData": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "tick_spacing": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tick Spacing",
            "description": "The tick spacing of the pool",
            "examples": [
              100,
              300,
              400,
              500,
              1000,
              1500,
              2500,
              2700,
              3000,
              5000,
              6000,
              7000,
              8000,
              9000,
              10000,
              20000
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          },
          "amount_out_minimum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Minimum",
            "description": "The minimum amount of the token to swap to, defaults to 0",
            "default": "0",
            "examples": [
              1.4
            ]
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "tick_spacing",
          "amount_in"
        ],
        "title": "AerodromeSlipstreamSellExactlyCallData"
      },
      "AerodromeSlipstreamWithdrawLiquidityProvisionCallData": {
        "properties": {
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "percentage_for_withdrawal": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Percentage For Withdrawal",
            "description": "How much liquidity to take out in percentage.",
            "examples": [
              "25",
              "50",
              "75",
              "100"
            ]
          }
        },
        "type": "object",
        "required": [
          "token_id",
          "percentage_for_withdrawal"
        ],
        "title": "AerodromeSlipstreamWithdrawLiquidityProvisionCallData",
        "description": "Endpoint parameters for liquidity provision withdrawal on aerodrome slipstream.\n\nThis action is performed in a multicall on the NonfungiblePosition Manager: https://github.com/AerodromeSlipstream/v3-periphery/blob/0682387198a24c7cd63566a2c58398533860a5d1/contracts/base/Multicall.sol#L11-L27\nFirst, we call decrease liquidity then collect the tokens owed to the user."
      },
      "AerodromeSwapEthForTokenCallData": {
        "properties": {
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of ETH you will give to aerodrome_basic for this trade",
            "examples": [
              1.5
            ]
          },
          "amount_out_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Min",
            "description": "The minimal amount of token you are willing to receive (will revert if the swap gives you less)",
            "examples": [
              2500
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to trade on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to trade on a volatile pool with a bonding curve of K=xy"
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the funds from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_out",
          "amount_in",
          "amount_out_min",
          "stable"
        ],
        "title": "AerodromeSwapEthForTokenCallData"
      },
      "AerodromeSwapTokenForEthCallData": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of tokens you will give to aerodrome_basic for this trade",
            "examples": [
              6000
            ]
          },
          "amount_out_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Min",
            "description": "The minimal amount of ETH you are willing to receive (will revert if the swap gives you less)",
            "examples": [
              1.5
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to trade on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to trade on a volatile pool with a bonding curve of K=xy"
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the funds from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "amount_in",
          "amount_out_min",
          "stable"
        ],
        "title": "AerodromeSwapTokenForEthCallData"
      },
      "AerodromeSwapTokensCallData": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of tokens you will give to aerodrome_basic for this trade",
            "examples": [
              6000
            ]
          },
          "amount_out_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Min",
            "description": "The minimal amount of token you are willing to receive (will revert if the swap gives you less)",
            "examples": [
              1.5
            ]
          },
          "stable": {
            "type": "boolean",
            "title": "Stable",
            "description": "If true, try to trade on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to trade on a volatile pool with a bonding curve of K=xy"
          },
          "to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "To",
            "description": "The receiver of the funds from this trade, default to sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "amount_in",
          "amount_out_min",
          "stable"
        ],
        "title": "AerodromeSwapTokensCallData"
      },
      "AllowanceInfo": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of tokens allowed to be spent by spender",
            "examples": [
              1.5
            ]
          },
          "decimals": {
            "type": "integer",
            "title": "Decimals",
            "description": "Number of decimals of the token",
            "examples": [
              18
            ]
          },
          "token_symbol": {
            "$ref": "#/components/schemas/Token",
            "description": "Symbol of the token<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "Address of the token",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          },
          "contract_address": {
            "type": "string",
            "title": "Contract Address",
            "description": "Address of the contract",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "decimals",
          "token_symbol",
          "token_address",
          "contract_address"
        ],
        "title": "AllowanceInfo"
      },
      "BalanceInfo": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of tokens a particular address holds",
            "examples": [
              1.5
            ]
          },
          "decimals": {
            "type": "integer",
            "title": "Decimals",
            "description": "Number of decimals of the token",
            "examples": [
              18
            ]
          },
          "token_symbol": {
            "$ref": "#/components/schemas/Token",
            "description": "Symbol of the token<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "Address of the token",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "decimals",
          "token_symbol",
          "token_address"
        ],
        "title": "BalanceInfo"
      },
      "BaseTransactionRequest_AerodromeLiquidityProvisionCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeLiquidityProvisionCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeLiquidityProvisionCallData]"
      },
      "BaseTransactionRequest_AerodromeLiquidityProvisionEthCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeLiquidityProvisionEthCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeLiquidityProvisionEthCallData]"
      },
      "BaseTransactionRequest_AerodromeRemoveLiquidityCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeRemoveLiquidityCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeRemoveLiquidityCallData]"
      },
      "BaseTransactionRequest_AerodromeRemoveLiquidityEthCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeRemoveLiquidityEthCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeRemoveLiquidityEthCallData]"
      },
      "BaseTransactionRequest_AerodromeSlipstreamBuyExactlyCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSlipstreamBuyExactlyCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSlipstreamBuyExactlyCallData]"
      },
      "BaseTransactionRequest_AerodromeSlipstreamIncreaseLiquidityProvisionCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSlipstreamIncreaseLiquidityProvisionCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSlipstreamIncreaseLiquidityProvisionCallData]"
      },
      "BaseTransactionRequest_AerodromeSlipstreamMintLiquidityProvisionCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSlipstreamMintLiquidityProvisionCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSlipstreamMintLiquidityProvisionCallData]"
      },
      "BaseTransactionRequest_AerodromeSlipstreamSellExactlyCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSlipstreamSellExactlyCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSlipstreamSellExactlyCallData]"
      },
      "BaseTransactionRequest_AerodromeSlipstreamWithdrawLiquidityProvisionCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSlipstreamWithdrawLiquidityProvisionCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSlipstreamWithdrawLiquidityProvisionCallData]"
      },
      "BaseTransactionRequest_AerodromeSwapEthForTokenCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSwapEthForTokenCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSwapEthForTokenCallData]"
      },
      "BaseTransactionRequest_AerodromeSwapTokenForEthCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSwapTokenForEthCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSwapTokenForEthCallData]"
      },
      "BaseTransactionRequest_AerodromeSwapTokensCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/AerodromeSwapTokensCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[AerodromeSwapTokensCallData]"
      },
      "BaseTransactionRequest_IncreaseErc20AllowanceAnyCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/IncreaseErc20AllowanceAnyCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[IncreaseErc20AllowanceAnyCallData]"
      },
      "BaseTransactionRequest_IncreaseErc20AllowanceCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/IncreaseErc20AllowanceCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[IncreaseErc20AllowanceCallData]"
      },
      "BaseTransactionRequest_TransferERC20TokenCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/TransferERC20TokenCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[TransferERC20TokenCallData]"
      },
      "BaseTransactionRequest_UnwrapWethRequestCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/UnwrapWethRequestCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[UnwrapWethRequestCallData]"
      },
      "BaseTransactionRequest_WrapEthRequestCallData_": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/WrapEthRequestCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "BaseTransactionRequest[WrapEthRequestCallData]"
      },
      "Chain": {
        "type": "string",
        "enum": [
          "ethereum:mainnet",
          "arbitrum:mainnet",
          "base:mainnet"
        ],
        "title": "Chain",
        "description": "The chain to use.\n\nAll token balances are per-chain."
      },
      "ContractName": {
        "type": "string",
        "enum": [
          "AaveV3Pool",
          "AaveV3Oracle",
          "AaveV3ProtocolDataProvider",
          "AerodromeBasicFactory",
          "AerodromeSlipstreamFactory",
          "AerodromeBasicRouter",
          "AerodromeSlipstreamRouter",
          "AerodromeBasicPool",
          "AerodromeSlipstreamNonfungiblePositionManager",
          "UniswapV3Router",
          "UniswapV3Factory",
          "UniswapV3NFTPositionManager",
          "UniswapV3Quoter",
          "ChainlinkEACAggregatorProxy"
        ],
        "title": "ContractName",
        "description": "Select the protocol.\n\nE.g. for increasing ERC-20 allowance."
      },
      "EnsNameInfo": {
        "properties": {
          "wallet_address": {
            "type": "string",
            "title": "Wallet Address",
            "description": "The wallet address of the user",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "registrant": {
            "type": "string",
            "title": "Registrant",
            "description": "The registrant of the ENS",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "wallet_address",
          "registrant"
        ],
        "title": "EnsNameInfo"
      },
      "FeeEnum": {
        "type": "string",
        "enum": [
          "0.01",
          "0.05",
          "0.3",
          "1.0"
        ],
        "title": "FeeEnum",
        "description": "The transaction fee of a Uniswap pool in bips.\n\nUniswap supports 4 different fee levels."
      },
      "GetErc20Allowance": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to get the ERC20 balance of.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the allowance is checked.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to check allowance for.",
            "examples": [
              "AaveV3Pool"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user",
          "token",
          "contract_name"
        ],
        "title": "GetErc20Allowance"
      },
      "GetErc20Balance": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The user to get the ERC20 balance of.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the allowance is checked.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user",
          "token"
        ],
        "title": "GetErc20Balance"
      },
      "GetSupportedTokens": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        },
        "type": "object",
        "required": [
          "chain"
        ],
        "title": "GetSupportedTokens"
      },
      "GetTokenPrice": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which to get the price<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token"
        ],
        "title": "GetTokenPrice"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Image": {
        "properties": {
          "image": {
            "type": "string",
            "title": "Image",
            "description": "Base64 encoded SVG image",
            "examples": [
              "data:image/svg+xml;base64, ..."
            ]
          }
        },
        "type": "object",
        "required": [
          "image"
        ],
        "title": "Image"
      },
      "IncreaseErc20AllowanceAnyCallData": {
        "properties": {
          "token_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the token for which the allowance is increased.",
            "examples": [
              "AerodromeBasicPool"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "The address of the ERC20 token for which the allowance is increased.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to increase allowance for.",
            "examples": [
              "AerodromeBasicRouter"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of tokens to increase the allowance by.",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "token_name",
          "token_address",
          "contract_name",
          "amount"
        ],
        "title": "IncreaseErc20AllowanceAnyCallData"
      },
      "IncreaseErc20AllowanceCallData": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token for which the allowance is increased.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "contract_name": {
            "$ref": "#/components/schemas/ContractName",
            "description": "The name of the contract to increase allowance for.",
            "examples": [
              "AaveV3Pool"
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of tokens to increase the allowance by.",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "token",
          "contract_name",
          "amount"
        ],
        "title": "IncreaseErc20AllowanceCallData"
      },
      "InterestRateMode": {
        "type": "integer",
        "enum": [
          1,
          2
        ],
        "title": "InterestRateMode",
        "description": "On AAVE there are 2 different interest modes.\n\nA stable (but typically higher rate), or a variable rate."
      },
      "Portfolio": {
        "properties": {
          "total_value_in_usd": {
            "type": "string",
            "title": "Total Value In Usd",
            "description": "Total value of the portfolio in USD",
            "examples": [
              10000.0
            ]
          },
          "token_balances": {
            "items": {
              "$ref": "#/components/schemas/TokenBalance"
            },
            "type": "array",
            "title": "Token Balances",
            "description": "List of token balances in the portfolio"
          }
        },
        "type": "object",
        "required": [
          "total_value_in_usd",
          "token_balances"
        ],
        "title": "Portfolio"
      },
      "PriceResponse": {
        "properties": {
          "token_price_in_usd": {
            "type": "string",
            "title": "Token Price In Usd"
          }
        },
        "type": "object",
        "required": [
          "token_price_in_usd"
        ],
        "title": "PriceResponse"
      },
      "RequestEnsDetails": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "ens_name": {
            "type": "string",
            "title": "Ens Name",
            "description": "The ENS address of the user.",
            "examples": [
              "vitalik.eth"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "ens_name"
        ],
        "title": "RequestEnsDetails"
      },
      "RequestUserAddress": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "RequestUserAddress"
      },
      "Token": {
        "type": "string",
        "enum": [
          "1INCH",
          "AAVE",
          "BAL",
          "cbBTC",
          "cbETH",
          "CRV",
          "crvUSD",
          "DAI",
          "ENS",
          "ETHx",
          "FRAX",
          "FXS",
          "GHO",
          "KNC",
          "LDO",
          "LINK",
          "LUSD",
          "MKR",
          "osETH",
          "PYUSD",
          "rETH",
          "RPL",
          "rsETH",
          "sDAI",
          "SNX",
          "STG",
          "sUSDe",
          "tBTC",
          "UNI",
          "USDC",
          "USDe",
          "USDS",
          "USDT",
          "WBTC",
          "weETH",
          "WETH",
          "wstETH",
          "ARB",
          "EURS",
          "MAI",
          "USDCe",
          "AERO",
          "EUR",
          "VIRTUAL"
        ],
        "title": "Token",
        "description": "A class representing the token.\n\nThis class is used to represent the token in the system. Notice individual\nendpoints' documentation where per chain tokens are presented."
      },
      "TokenBalance": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of tokens a particular address holds",
            "examples": [
              1.5
            ]
          },
          "decimals": {
            "type": "integer",
            "title": "Decimals",
            "description": "Number of decimals of the token",
            "examples": [
              18
            ]
          },
          "token_symbol": {
            "$ref": "#/components/schemas/Token",
            "description": "Symbol of the token<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_address": {
            "type": "string",
            "title": "Token Address",
            "description": "Address of the token",
            "examples": [
              "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
            ]
          },
          "price": {
            "type": "string",
            "title": "Price",
            "description": "Price of the token in USD",
            "examples": [
              2000.0
            ]
          },
          "token_value_in_usd": {
            "type": "string",
            "title": "Token Value In Usd",
            "description": "Value of the token balance in USD",
            "examples": [
              2000.0
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "decimals",
          "token_symbol",
          "token_address",
          "price",
          "token_value_in_usd"
        ],
        "title": "TokenBalance"
      },
      "TokenInfo": {
        "properties": {
          "tokens": {
            "items": {
              "$ref": "#/components/schemas/Token"
            },
            "type": "array",
            "title": "Tokens",
            "description": "List of supported tokens for a gived chain"
          }
        },
        "type": "object",
        "required": [
          "tokens"
        ],
        "title": "TokenInfo"
      },
      "TransferERC20TokenCallData": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "Amount of token to transfer",
            "examples": [
              1.5
            ]
          },
          "token": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to transfer.<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the tokens.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc44"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "token",
          "to"
        ],
        "title": "TransferERC20TokenCallData"
      },
      "TransferEth": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "call_data": {
            "$ref": "#/components/schemas/TransferEthCallData"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "call_data"
        ],
        "title": "TransferEth"
      },
      "TransferEthCallData": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "Amount of ETH to transfer",
            "examples": [
              1.5
            ]
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the ETH.",
            "examples": [
              "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc44"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "to"
        ],
        "title": "TransferEthCallData"
      },
      "UniswapBuyExactlyRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              1.5
            ]
          },
          "amount_in_maximum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In Maximum",
            "description": "The maximum amount of the token to swap from",
            "examples": [
              1.6
            ]
          },
          "wrap_eth": {
            "type": "boolean",
            "title": "Wrap Eth",
            "description": "Whether to wrap ETH to WETH, only use when swapping WETH into something",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token_in",
          "token_out",
          "fee",
          "amount_out",
          "amount_in_maximum"
        ],
        "title": "UniswapBuyExactlyRequest"
      },
      "UniswapBuyQuoteInfoResponse": {
        "properties": {
          "amount_in": {
            "type": "string",
            "title": "Amount In",
            "description": "The amount of token_in you would need to give to the pool."
          },
          "price_after": {
            "type": "string",
            "title": "Price After",
            "description": "The price of the pool after this trade would happen. (How much token0 you need to buy 1 token1.)"
          }
        },
        "type": "object",
        "required": [
          "amount_in",
          "price_after"
        ],
        "title": "UniswapBuyQuoteInfoResponse"
      },
      "UniswapCheckInRangeRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_id"
        ],
        "title": "UniswapCheckInRangeRequest",
        "description": "Endpoint parameters for checking if liquidity position is in active tick range on\nuniswap v3."
      },
      "UniswapCheckInRangeResponse": {
        "properties": {
          "in_range": {
            "type": "boolean",
            "title": "In Range",
            "description": "Whether the position is in active tick range or not. If not in range, the position is not earning trading fees."
          }
        },
        "type": "object",
        "required": [
          "in_range"
        ],
        "title": "UniswapCheckInRangeResponse"
      },
      "UniswapGetBuyQuoteRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The fee to pay for the swap",
            "examples": [
              "0.3"
            ]
          },
          "amount_out": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out",
            "description": "The amount of the token to swap to",
            "examples": [
              3000
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "fee",
          "amount_out"
        ],
        "title": "UniswapGetBuyQuoteRequest"
      },
      "UniswapGetLiquidityProvisionPositionsRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "The address of the user to check the balance of",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          }
        },
        "type": "object",
        "required": [
          "chain",
          "user"
        ],
        "title": "UniswapGetLiquidityProvisionPositionsRequest"
      },
      "UniswapGetPoolPriceRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of a token in the pool<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The fee of the pool",
            "examples": [
              "0.3"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "fee"
        ],
        "title": "UniswapGetPoolPriceRequest"
      },
      "UniswapGetSellQuoteRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "USDC"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The fee to pay for the swap",
            "examples": [
              "0.3"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "token_in",
          "token_out",
          "fee",
          "amount_in"
        ],
        "title": "UniswapGetSellQuoteRequest"
      },
      "UniswapIncreaseLiquidityProvision": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token_id",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min"
        ],
        "title": "UniswapIncreaseLiquidityProvision"
      },
      "UniswapLPPositionsInfoResponse": {
        "properties": {
          "positions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/UniswapPosition"
            },
            "type": "object",
            "title": "Positions",
            "description": "Liquidity provision positions belonging to a particular user. The key is a\n        tuple of the token0, token1, fee, tick_lower, and tick_upper of the position."
          }
        },
        "type": "object",
        "required": [
          "positions"
        ],
        "title": "UniswapLPPositionsInfoResponse"
      },
      "UniswapMintLiquidityProvision": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token0": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the first token in the pair<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token1": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the second token in the pair<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "tick_lower": {
            "type": "integer",
            "maximum": 887272.0,
            "minimum": -887272.0,
            "title": "Tick Lower",
            "description": "The lower tick of the range to mint the position in",
            "examples": [
              -1000
            ]
          },
          "tick_upper": {
            "type": "integer",
            "maximum": 887272.0,
            "minimum": -887272.0,
            "title": "Tick Upper",
            "description": "The upper tick of the range to mint the position in",
            "examples": [
              1000
            ]
          },
          "amount0_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Desired",
            "description": "The desired amount of the first token to deposit",
            "examples": [
              "1.5"
            ]
          },
          "amount1_desired": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Desired",
            "description": "The desired amount of the second token to deposit",
            "examples": [
              "1.7"
            ]
          },
          "amount0_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount0 Min",
            "description": "The minimum amount of the first token to deposit",
            "examples": [
              "1.4"
            ]
          },
          "amount1_min": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount1 Min",
            "description": "The minimum amount of the second token to deposit",
            "examples": [
              "1.6"
            ]
          },
          "recipient": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recipient",
            "description": "The address that will receive the LP tokens",
            "examples": [
              "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token0",
          "token1",
          "fee",
          "tick_lower",
          "tick_upper",
          "amount0_desired",
          "amount1_desired",
          "amount0_min",
          "amount1_min"
        ],
        "title": "UniswapMintLiquidityProvision"
      },
      "UniswapPoolPriceResponse": {
        "properties": {
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The first token "
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The second token in the pool"
          },
          "price": {
            "type": "string",
            "title": "Price",
            "description": "The price of the pool. This is expressed as an instantanteous amount of how many token0 you need to buy 1 token1. In any swap this will not change during the trade; use the quote endpoint to get a better idea of how much you will pay!"
          },
          "tick": {
            "type": "integer",
            "title": "Tick",
            "description": "The current tick in the pool. This is a number that represents the price of the pool according to the uniswap v3 concentrated liquidity concept."
          }
        },
        "type": "object",
        "required": [
          "token_in",
          "token_out",
          "price",
          "tick"
        ],
        "title": "UniswapPoolPriceResponse"
      },
      "UniswapPosition": {
        "properties": {
          "nonce": {
            "type": "integer",
            "title": "Nonce"
          },
          "operator": {
            "type": "string",
            "title": "Operator"
          },
          "token0": {
            "$ref": "#/components/schemas/Token"
          },
          "token1": {
            "$ref": "#/components/schemas/Token"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum"
          },
          "tick_lower": {
            "type": "integer",
            "title": "Tick Lower"
          },
          "tick_upper": {
            "type": "integer",
            "title": "Tick Upper"
          },
          "liquidity": {
            "type": "integer",
            "title": "Liquidity"
          },
          "fee_growth_inside0_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside0 Last X128"
          },
          "fee_growth_inside1_last_x128": {
            "type": "integer",
            "title": "Fee Growth Inside1 Last X128"
          },
          "tokens_owed0": {
            "type": "integer",
            "title": "Tokens Owed0"
          },
          "tokens_owed1": {
            "type": "integer",
            "title": "Tokens Owed1"
          },
          "token_id": {
            "type": "integer",
            "title": "Token Id"
          }
        },
        "type": "object",
        "required": [
          "nonce",
          "operator",
          "token0",
          "token1",
          "fee",
          "tick_lower",
          "tick_upper",
          "liquidity",
          "fee_growth_inside0_last_x128",
          "fee_growth_inside1_last_x128",
          "tokens_owed0",
          "tokens_owed1",
          "token_id"
        ],
        "title": "UniswapPosition"
      },
      "UniswapSellExactlyRequest": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token_in": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap from<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "token_out": {
            "$ref": "#/components/schemas/Token",
            "description": "The symbol of the token to swap to<br> Note the supported tokens per chain:<br>**ethereum:mainnet**: ['1INCH', 'AAVE', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'ENS', 'ETHx', 'FRAX', 'FXS', 'GHO', 'KNC', 'LDO', 'LINK', 'LUSD', 'MKR', 'osETH', 'PYUSD', 'rETH', 'RPL', 'rsETH', 'sDAI', 'SNX', 'STG', 'sUSDe', 'tBTC', 'UNI', 'USDC', 'USDe', 'USDS', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**arbitrum:mainnet**: ['AAVE', 'ARB', 'DAI', 'EURS', 'FRAX', 'GHO', 'LINK', 'LUSD', 'MAI', 'rETH', 'USDC', 'USDCe', 'USDT', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>**base:mainnet**: ['1INCH', 'AERO', 'ARB', 'BAL', 'cbBTC', 'cbETH', 'CRV', 'crvUSD', 'DAI', 'EUR', 'LUSD', 'MKR', 'osETH', 'rETH', 'SNX', 'STG', 'tBTC', 'USDC', 'UNI', 'USDT', 'VIRTUAL', 'WBTC', 'weETH', 'WETH', 'wstETH']<br>",
            "examples": [
              "WETH"
            ]
          },
          "fee": {
            "$ref": "#/components/schemas/FeeEnum",
            "description": "The swap fee of the pool",
            "examples": [
              "0.3"
            ]
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount In",
            "description": "The amount of the token to swap from",
            "examples": [
              1.5
            ]
          },
          "amount_out_minimum": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount Out Minimum",
            "description": "The minimum amount of the token to swap to, defaults to 0",
            "default": "0",
            "examples": [
              1.4
            ]
          },
          "wrap_eth": {
            "type": "boolean",
            "title": "Wrap Eth",
            "description": "Whether to wrap ETH to WETH, only use when swapping WETH into something",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token_in",
          "token_out",
          "fee",
          "amount_in"
        ],
        "title": "UniswapSellExactlyRequest"
      },
      "UniswapSellQuoteInfoResponse": {
        "properties": {
          "amount_out": {
            "type": "string",
            "title": "Amount Out",
            "description": "The amount of token_out you would receive from the pool."
          },
          "price_after": {
            "type": "string",
            "title": "Price After",
            "description": "The price of the pool after this trade would happen. (How much token0 you need to buy 1 token1.)"
          }
        },
        "type": "object",
        "required": [
          "amount_out",
          "price_after"
        ],
        "title": "UniswapSellQuoteInfoResponse"
      },
      "UniswapWithdrawLiquidityProvision": {
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "sender": {
            "type": "string",
            "title": "Sender",
            "description": "The address of the transaction sender",
            "example": "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
          },
          "token_id": {
            "type": "integer",
            "title": "Token Id",
            "description": "Token ID of the NFT representing the liquidity provisioned position."
          },
          "percentage_for_withdrawal": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Percentage For Withdrawal",
            "description": "How much liquidity to take out in percentage.",
            "examples": [
              "25",
              "50",
              "75",
              "100"
            ]
          }
        },
        "type": "object",
        "required": [
          "chain",
          "sender",
          "token_id",
          "percentage_for_withdrawal"
        ],
        "title": "UniswapWithdrawLiquidityProvision",
        "description": "Endpoint parameters for liquidity provision withdrawal on uniswap v3.\n\nThis action is performed in a multicall on the NonfungiblePosition Manager: https://github.com/Uniswap/v3-periphery/blob/0682387198a24c7cd63566a2c58398533860a5d1/contracts/base/Multicall.sol#L11-L27\nFirst, we call decrease liquidity then collect the tokens owed to the user."
      },
      "UnsignedTransaction": {
        "properties": {
          "chainId": {
            "type": "integer",
            "title": "Chainid",
            "description": "The chain id of the transaction"
          },
          "data": {
            "type": "string",
            "title": "Data",
            "description": "The data of the transaction"
          },
          "from": {
            "type": "string",
            "title": "From",
            "description": "The sender of the transaction"
          },
          "gas": {
            "type": "integer",
            "title": "Gas",
            "description": "The gas of the transaction"
          },
          "to": {
            "type": "string",
            "title": "To",
            "description": "The recipient of the transaction"
          },
          "value": {
            "type": "integer",
            "title": "Value",
            "description": "The value of the transaction"
          },
          "nonce": {
            "type": "integer",
            "title": "Nonce",
            "description": "The nonce of the address"
          },
          "maxFeePerGas": {
            "type": "integer",
            "title": "Maxfeepergas",
            "description": "The max fee per gas of the transaction"
          },
          "maxPriorityFeePerGas": {
            "type": "integer",
            "title": "Maxpriorityfeepergas",
            "description": "The max priority fee per gas of the transaction"
          }
        },
        "type": "object",
        "required": [
          "chainId",
          "data",
          "from",
          "gas",
          "to",
          "value",
          "nonce",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ],
        "title": "UnsignedTransaction"
      },
      "UnwrapWethRequestCallData": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of ETH to unwrap.",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "UnwrapWethRequestCallData"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WrapEthRequestCallData": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string"
              }
            ],
            "title": "Amount",
            "description": "The amount of ETH to wrap.",
            "examples": [
              1.5
            ]
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "WrapEthRequestCallData"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key",
        "description": "Your Compass API key. Get your key [here](/auth/get_api_token)."
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
